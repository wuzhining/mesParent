package com.techsoft.client.service.work;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageInfo;
import com.techsoft.common.BaseClientServiceImpl;
import com.techsoft.common.BaseService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.utils.BeanUtil;
import com.techsoft.entity.common.BillWorkorder;
import com.techsoft.entity.common.ConfigDictionary;
import com.techsoft.entity.common.ProductBom;
import com.techsoft.entity.common.ProductMain;
import com.techsoft.entity.common.ProductMaterial;
import com.techsoft.entity.common.StructFactory;
import com.techsoft.entity.common.StructProcessNode;
import com.techsoft.entity.common.StructProductionline;
import com.techsoft.entity.common.StructWorkshop;
import com.techsoft.entity.common.WorkTaskProcedure;
import com.techsoft.entity.work.WorkTaskProcedureVo;
import com.techsoft.entity.work.WorkTaskProcedureParamVo;
import com.techsoft.service.bill.BillWorkorderService;
import com.techsoft.service.config.ConfigDictionaryService;
import com.techsoft.service.product.ProductBomService;
import com.techsoft.service.product.ProductMainService;
import com.techsoft.service.product.ProductMaterialService;
import com.techsoft.service.struct.StructFactoryService;
import com.techsoft.service.struct.StructProcessNodeService;
import com.techsoft.service.struct.StructProcessService;
import com.techsoft.service.struct.StructProductionlineService;
import com.techsoft.service.struct.StructWorkshopService;
import com.techsoft.service.work.WorkTaskProcedureService;

@org.springframework.stereotype.Service
public class ClientWorkTaskProcedureServiceImpl extends BaseClientServiceImpl<WorkTaskProcedure> implements ClientWorkTaskProcedureService {
	@com.alibaba.dubbo.config.annotation.Reference
	private WorkTaskProcedureService workTaskProcedureService; 
	@com.alibaba.dubbo.config.annotation.Reference
	private StructProcessNodeService structProcessNodeService;
	@com.alibaba.dubbo.config.annotation.Reference
	private StructFactoryService structFactoryService;
	@com.alibaba.dubbo.config.annotation.Reference
	private ConfigDictionaryService configDictionaryService;
	@com.alibaba.dubbo.config.annotation.Reference
	private StructProcessService structProcessService;
	@com.alibaba.dubbo.config.annotation.Reference
	private StructWorkshopService structWorkshopService;
	@com.alibaba.dubbo.config.annotation.Reference
	private BillWorkorderService billWorkorderService;
	@com.alibaba.dubbo.config.annotation.Reference
	private StructProductionlineService structProductionlineService;
	@com.alibaba.dubbo.config.annotation.Reference
	private ProductBomService productBomService;
	@com.alibaba.dubbo.config.annotation.Reference
	private ProductMainService productMainService;
	@com.alibaba.dubbo.config.annotation.Reference
	private ProductMaterialService productMaterialService;
	
	@Override
	public BaseService<WorkTaskProcedure> getBaseService() {
		return workTaskProcedureService;
	}	    	
    
	private WorkTaskProcedureVo getVo(WorkTaskProcedure workTaskProcedure, CommonParam commonParam) throws BusinessException, SQLException {
		WorkTaskProcedureVo vo = new WorkTaskProcedureVo(workTaskProcedure);
		// TODO 此处填充其它关联字段的处理代码
		if (vo.getProcessNodeId() != null && vo.getProcessNodeId() > 0L) {
			StructProcessNode structProcessNode = structProcessNodeService.selectById(vo.getProcessNodeId(), commonParam);
			if (structProcessNode != null) {
				vo.setStructProcessNode(structProcessNode);
			}
		}
		if (vo.getFactoryId() != null && vo.getFactoryId() > 0L) {
			StructFactory factory=structFactoryService.selectById(vo.getFactoryId(), commonParam);
			if (factory != null) {
				vo.setFactory(factory);
			}
		}
		if (vo.getBillWorkorderId() != null && vo.getBillWorkorderId() > 0L) {
			BillWorkorder billWorkorder=billWorkorderService.selectById(vo.getBillWorkorderId(), commonParam);
			if (billWorkorder != null) {
				vo.setBillWorkorder(billWorkorder);
			}
		}
		if (vo.getWorkshopId() != null && vo.getWorkshopId() > 0L) {
			StructWorkshop	workshop=structWorkshopService.selectById(vo.getWorkshopId(), commonParam);
			if (workshop != null) {
				vo.setWorkshop(workshop);
			}
		}
		if (vo.getTaskStatusDictId() != null && vo.getTaskStatusDictId() > 0L) {
			ConfigDictionary taskStatusDic=configDictionaryService.selectById(vo.getTaskStatusDictId(), commonParam);
			if (taskStatusDic != null) {
				vo.setTaskStatusDic(taskStatusDic);
			}
		}
		if (vo.getBomId() != null && vo.getBomId() > 0L) {
			ProductBom productBom=productBomService.selectById(vo.getBomId(), commonParam);
			if (productBom != null) {
				vo.setProductBom(productBom);
			}
		}
		if (vo.getProductionlineId() != null && vo.getProductionlineId() > 0L) {
			StructProductionline productionline=structProductionlineService.selectById(vo.getProductionlineId(), commonParam);
			if (productionline != null) {
				vo.setProductionline(productionline);
			}
		}
		if (vo.getProductId() != null && vo.getProductId() > 0L) {
			ProductMain productMain=productMainService.selectById(vo.getProductId(), commonParam);
			if (productMain != null) {
				vo.setProductMain(productMain);
			}
		}
		if (vo.getMaterialId() != null && vo.getMaterialId() > 0L) {
			ProductMaterial productMaterial=productMaterialService.selectById(vo.getMaterialId(), commonParam);
			if (productMaterial != null) {
				vo.setProductMaterial(productMaterial);
			}
		}
		return vo;
	} 
	
	private WorkTaskProcedureVo getExtendVo(WorkTaskProcedure workTaskProcedure, CommonParam commonParam) throws BusinessException, SQLException {
		WorkTaskProcedureVo vo = this.getVo(workTaskProcedure, commonParam);
		// TODO 此处填充其它关联字段的处理代码
		return vo;
	} 
		
	private List<WorkTaskProcedureVo> getVoList(List<WorkTaskProcedure> list, CommonParam commonParam) throws BusinessException, SQLException {
		List<WorkTaskProcedureVo> voList = new ArrayList<WorkTaskProcedureVo>();
		for (WorkTaskProcedure entity : list) {
			voList.add(this.getVo(entity, commonParam));
		}
		
		return voList;
	}	
	
	private List<WorkTaskProcedureVo> getExtendVoList(List<WorkTaskProcedure> list, CommonParam commonParam) throws BusinessException, SQLException {
		List<WorkTaskProcedureVo> voList = new ArrayList<WorkTaskProcedureVo>();
		for (WorkTaskProcedure entity : list) {
			voList.add(this.getExtendVo(entity, commonParam));
		}
		
		return voList;
	}	
	
	public WorkTaskProcedureVo getVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		WorkTaskProcedure entity = this.getBaseService().selectById(id, commonParam);
		
		return this.getVo(entity, commonParam);
	}
	
	public List<WorkTaskProcedureVo>  selectListVoByParamVo(WorkTaskProcedureParamVo workTaskProcedure, CommonParam commonParam) throws BusinessException, SQLException {
		if(workTaskProcedure==null){
			workTaskProcedure = new WorkTaskProcedureParamVo();
		}
		workTaskProcedure.setTenantId(commonParam.getTenantId());	
	
		List<WorkTaskProcedure> list = (List<WorkTaskProcedure>) this.getBaseService().selectListByParamVo(workTaskProcedure, commonParam);
		
		return getVoList(list, commonParam);
	}
	
	@SuppressWarnings({"unchecked", "rawtypes" })
	public PageInfo<WorkTaskProcedureVo> selectPageVoByParamVo(WorkTaskProcedureParamVo workTaskProcedure, CommonParam commonParam, int pageNo, int pageSize) 
			throws BusinessException, SQLException {
		if(workTaskProcedure==null){
			workTaskProcedure = new WorkTaskProcedureParamVo();
		}
		workTaskProcedure.setTenantId(commonParam.getTenantId());	
					
		PageInfo<WorkTaskProcedure> list  = (PageInfo<WorkTaskProcedure>) this.getBaseService().selectPageByParamVo(workTaskProcedure, commonParam, pageNo, pageSize);
		List<WorkTaskProcedureVo> volist = new ArrayList<WorkTaskProcedureVo>();
		
		Iterator<WorkTaskProcedure> iter = list.getList().iterator();
		WorkTaskProcedureVo vo = null;
		while (iter.hasNext()) {
			vo = this.getVo(iter.next(), commonParam);
			volist.add(vo);
		}
		
		Page<WorkTaskProcedureVo> vpage = new Page<WorkTaskProcedureVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());
		
		return new PageInfo(vpage);
	}	
	
	public WorkTaskProcedureVo getExtendVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		WorkTaskProcedure entity = this.getBaseService().selectById(id, commonParam);
		
		return this.getExtendVo(entity, commonParam);
	}
	
	public List<WorkTaskProcedureVo>  selectListExtendVoByParamVo(WorkTaskProcedureParamVo workTaskProcedure, CommonParam commonParam) 
			throws BusinessException, SQLException {
		if(workTaskProcedure==null){
			workTaskProcedure = new WorkTaskProcedureParamVo();
		}
		workTaskProcedure.setTenantId(commonParam.getTenantId());	
					
		List<WorkTaskProcedure> list = (List<WorkTaskProcedure>) this.getBaseService().selectListByParamVo(workTaskProcedure, commonParam);
		
		return this.getExtendVoList(list, commonParam);
	}
	
	@SuppressWarnings({"unchecked", "rawtypes" })
	public PageInfo<WorkTaskProcedureVo> selectPageExtendVoByParamVo(WorkTaskProcedureParamVo workTaskProcedure, CommonParam commonParam, int pageNo, int pageSize) 
			throws BusinessException, SQLException {
		if(workTaskProcedure==null){
			workTaskProcedure = new WorkTaskProcedureParamVo();
		}
		workTaskProcedure.setTenantId(commonParam.getTenantId());	
					
		PageInfo<WorkTaskProcedure> list  = (PageInfo<WorkTaskProcedure>) this.getBaseService().selectPageByParamVo(workTaskProcedure, commonParam, pageNo, pageSize);
		List<WorkTaskProcedureVo> volist = new ArrayList<WorkTaskProcedureVo>();
		
		Iterator<WorkTaskProcedure> iter = list.getList().iterator();
		WorkTaskProcedureVo vo = null;
		while (iter.hasNext()) {
			vo = this.getExtendVo(iter.next(), commonParam);
			volist.add(vo);
		}
		
		Page<WorkTaskProcedureVo> vpage = new Page<WorkTaskProcedureVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());
		
		return new PageInfo(vpage);
	}	
	
	public ResultMessage saveOrUpdate(WorkTaskProcedureParamVo workTaskProcedureParamVo, CommonParam commonParam) { 
		ResultMessage resultMessage = new ResultMessage(); 
		WorkTaskProcedure workTaskProcedure = null;
		try {
			if (workTaskProcedureParamVo.getId() == null) {//新增
			 
				workTaskProcedureParamVo.setTenantId(commonParam.getTenantId());
				workTaskProcedure = workTaskProcedureService.saveOrUpdate(workTaskProcedureParamVo,
						commonParam);
				resultMessage.setIsSuccess(true);
			} else {  //修改
				WorkTaskProcedure workTaskProcedureVoTemp = this.selectById(workTaskProcedureParamVo
						.getId(), commonParam);

				BeanUtil.copyNotNullProperties(workTaskProcedureVoTemp,
						workTaskProcedureParamVo);
  
				workTaskProcedure = workTaskProcedureService.saveOrUpdate(
						workTaskProcedureVoTemp, commonParam); 
  
				resultMessage.setIsSuccess(true);
			}
			
			resultMessage.setBaseEntity(workTaskProcedure);
		} catch (BusinessException e) {
			resultMessage.addErr(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return resultMessage;
	}	
}
