package com.techsoft.dao.quality;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Repository;

import com.techsoft.common.BaseDaoImpl;
import com.techsoft.common.BaseMapper;
import com.techsoft.common.BusinessException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.SQLException;
import com.techsoft.mapper.sys.MycatSequenceMapper;
import com.techsoft.entity.common.QualitySampleRuleItem;
import com.techsoft.entity.quality.QualitySampleRuleItemVo;
import com.techsoft.mapper.quality.QualitySampleRuleItemMapper;

@Repository
public class QualitySampleRuleItemDaoImpl extends BaseDaoImpl<QualitySampleRuleItem> implements QualitySampleRuleItemDao {
	@Resource
	protected QualitySampleRuleItemMapper qualitySampleRuleItemMapper;
	@Resource
	protected MycatSequenceMapper mycatSequenceMapper;	
	
	@Override
	public Class<QualitySampleRuleItem> getEntityClass() {
		return QualitySampleRuleItem.class;
	}	
	
	@Override
	public BaseMapper<QualitySampleRuleItem> getBaseMapper() {
		return this.qualitySampleRuleItemMapper;
	}
	
	@Override
	@SuppressWarnings({ "rawtypes" })
	public BaseMapper getSeqMapper() {
		return mycatSequenceMapper;
	}
	
	@Override
	public String getTableName() {
		return "QUALITY_SAMPLE_RULE_ITEM";
	}
	
	@Override
	public void insertSaveCheck(QualitySampleRuleItem value) throws BusinessException, SQLException {
		if (value.getSampleRuleId() == null || value.getSampleRuleId().equals(0L)) {
			throw new BusinessException("抽样规则ID不能为空");
		}
		if (value.getSampleLetter() == null || value.getSampleLetter().equals(0L)) {
			throw new BusinessException("索引字母不能为空");
		}
		if (value.getQuantity() == null || value.getQuantity().equals(0L)) {
			throw new BusinessException("抽检样本数量不能为空");
		}

		if (value.getCreateUserId() == null || value.getCreateUserId().equals(0L)) {
			throw new BusinessException("创建人不能为空");
		}
	}
	
	@Override
	public void updateSaveCheck(QualitySampleRuleItem value) throws BusinessException, SQLException {
		if (value.getSampleRuleId() == null || value.getSampleRuleId().equals(0L)) {
			throw new BusinessException("抽样规则ID不能为空");
		}
		if (value.getSampleLetter() == null || value.getSampleLetter().equals(0L)) {
			throw new BusinessException("索引字母不能为空");
		}
		if (value.getQuantity() == null || value.getQuantity().equals(0L)) {
			throw new BusinessException("抽检样本数量不能为空");
		}
		if (value.getModifyUserId() == null || value.getModifyUserId().equals(0L)) {
			throw new BusinessException("修改人不能为空");
		}
	}
	
	@Override
	public void deleteSaveCheck(QualitySampleRuleItem value) throws BusinessException, SQLException {
	
	}

	@Override
	public void insertBatch(QualitySampleRuleItemVo qualitySampleRuleItemVo,List<QualitySampleRuleItem> sampleRuleItem, CommonParam commonParam) throws BusinessException, SQLException {
		try {
			for (QualitySampleRuleItem item : sampleRuleItem) {
				long id = this.qualitySampleRuleItemMapper.getIDValue();
				item.setCreateUserId(Long.valueOf(commonParam.getUserId()));
				item.setModifyUserId(Long.valueOf(commonParam.getUserId()));
				item.setTenantId(qualitySampleRuleItemVo.getTenantId());
				item.setSampleRuleId(qualitySampleRuleItemVo.getSampleRuleId());
				item.setId(id);
			}
			int rows = this.qualitySampleRuleItemMapper.insertBatch(sampleRuleItem);
			if (rows != sampleRuleItem.size()) {
				throw new BusinessException("批量增加的AQL明细数据与传入的AQL明细列表数量不一致， 请检查!");
			}

		} catch (RuntimeException e) {
			throw new SQLException(e.getMessage());
		}
			
    }
	
	

	
	@Override
	public void updateBatch(QualitySampleRuleItem qualitySampleRuleItemVo,List<QualitySampleRuleItem> sampleRuleItem, CommonParam commonParam) throws BusinessException, SQLException {
		try {
			for (QualitySampleRuleItem item : sampleRuleItem) {
				item.setModifyUserId(Long.valueOf(commonParam.getUserId()));
				item.setTenantId(qualitySampleRuleItemVo.getTenantId());
			}
			int rows= this.qualitySampleRuleItemMapper.updateBatch(sampleRuleItem);
		} catch (RuntimeException e) {
			throw new SQLException(e.getMessage());
		}
			
    }
	
	
	
	
	
	
	
	
	
	
}