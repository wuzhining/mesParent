package com.techsoft.controller.warehouse;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageInfo;
import com.techsoft.client.service.warehouse.ClientWarehousePalletItemService;
import com.techsoft.client.service.warehouse.ClientWarehousePalletService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.constants.Constants;
import com.techsoft.common.maps.MapUserStatus;
import com.techsoft.common.maps.MapYesOrNo;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.persistence.ReturnPageInfo;
import com.techsoft.controller.BaseController;
import com.techsoft.entity.common.WarehousePallet;
import com.techsoft.entity.warehouse.WarehousePalletItemParamVo;
import com.techsoft.entity.warehouse.WarehousePalletItemVo;
import com.techsoft.entity.warehouse.WarehousePalletParamVo;

@Controller
@RequestMapping("/warehouse/warehousePalletItem")
public class WarehousePalletItemController extends BaseController {
	@Autowired
	private ClientWarehousePalletItemService clientWarehousePalletItemService;
	@Autowired
	private ClientWarehousePalletService ClientWarehousePalletService;
	
	/**
	 * 页面关联数据初始化
	 * @param modelAndView
	 */
	public void initData(ModelAndView modelAndView) { 
		modelAndView.addObject("mapYesOrNo", MapYesOrNo.getMap());  
		modelAndView.addObject("mapUserStatus", MapUserStatus.getMap());  
	}
	
	
	@RequestMapping("/list")
	public ModelAndView list(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("warehouse/warehousePalletItem-list");
		return modelAndView;
	}
	

	@RequestMapping("/edit")
	public ModelAndView edit(HttpServletRequest request, Long id) {
//		ModelAndView modelAndView = new ModelAndView();
//		modelAndView.setViewName("warehouse/warehousePalletItem-edit");
//		WarehousePalletItemVo entity = new WarehousePalletItemVo();
//		try {
//			if (id != null) {
//				entity = clientWarehousePalletItemService.getVoByID(id);
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//		modelAndView.addObject("entity", entity);
//		initData(modelAndView);
//		return modelAndView;
		
		ModelAndView modelAndView = new ModelAndView();
		try {
			//取栈板集合
			WarehousePalletParamVo ParamVopallet = new WarehousePalletParamVo();
			List<WarehousePallet> palletList = ClientWarehousePalletService.selectListByParamVo(ParamVopallet,this.getCommonParam(null));
			modelAndView.addObject("palletList", palletList);
			
			
			WarehousePalletItemVo entity = new WarehousePalletItemVo();
			if (id != null) {;
			   entity = clientWarehousePalletItemService.getVoByID(id, this.getCommonParam(request));
			}
			modelAndView.addObject("entity", entity);
			modelAndView.setViewName("warehouse/warehousePalletItem-edit");
			initData(modelAndView);
		} catch (BusinessException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return modelAndView;
	}

	@ResponseBody
	@RequestMapping("/list/json")
	@SuppressWarnings("rawtypes")	
	public ReturnPageInfo listJson(HttpServletRequest request,
			WarehousePalletItemParamVo warehousePalletItemParamVo, Integer pageIndex, Integer pageSize) {
		PageInfo pageInfo = null;
		Integer pageNumber = 0;
		if (pageSize != null) {
			pageNumber = pageSize;
		} else {
			pageNumber = Constants.SEARCH_PAGE_SIZE;
		}			
		try {
            if(warehousePalletItemParamVo==null){
            	warehousePalletItemParamVo = new WarehousePalletItemParamVo();
            }
            //warehousePalletItemParamVo.setTenantId(getLoginTenantId(request)); 
			pageInfo = clientWarehousePalletItemService.selectPageVoByParamVo(
					warehousePalletItemParamVo, this.getCommonParam(request),
					pageIndex, pageNumber);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage save(HttpServletRequest request,
			WarehousePalletItemParamVo warehousePalletItemParamVo) {
		ResultMessage resultMessage = new ResultMessage();
	 
	    warehousePalletItemParamVo.setModifyUserId(getLoginUserId(request)); 
		resultMessage = clientWarehousePalletItemService.saveOrUpdate(warehousePalletItemParamVo,
				this.getCommonParam(request));

		return resultMessage;
	}

	@RequestMapping(value = "/saveBarCode", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage saveBarCode(HttpServletRequest request,Integer palletId,String remark,String barcode) {
		Map<Object,Object> map=new HashMap<Object,Object>();
		map.put("palletId", palletId);
		map.put("remark", remark);
		map.put("barcode", barcode);
		int result=0;
		ResultMessage resultMessage = new ResultMessage();
		try {
			result= clientWarehousePalletItemService.updateBarcodeMainByBarcode(map,
					this.getCommonParam(request));
			if(result>0) {
				resultMessage.setIsSuccess(true);
			}
		} catch (BusinessException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return resultMessage;
	}
}
