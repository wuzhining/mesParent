package com.techsoft.controller.pda;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.techsoft.client.service.barcode.ClientBarcodeMainService;
import com.techsoft.client.service.bill.ClientBillWarehouseItemService;
import com.techsoft.client.service.bill.ClientBillWarehouseService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.enums.EnumDictBarcodeStatus;
import com.techsoft.common.enums.EnumDictBillStatus;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.controller.BaseController;
import com.techsoft.entity.barcode.BarcodeMainParamVo;
import com.techsoft.entity.barcode.BarcodeMainVo;
import com.techsoft.entity.bill.BillWarehouseItemParamVo;
import com.techsoft.entity.bill.BillWarehouseItemVo;
import com.techsoft.entity.bill.BillWarehouseParamVo;
import com.techsoft.entity.bill.BillWarehouseVo;
import com.techsoft.entity.common.BarcodeMain;
import com.techsoft.entity.common.BillWarehouseItem;
import com.techsoft.service.barcode.BarcodeMainService;

/**
 * @auther:Wang
 * @version:2019年4月26日上午10:33:10
 * @param:
 * @description pda出库请求controller层
 */
@Controller
@RequestMapping("/pda/pdaOutStore")
public class PdaOutStoreController extends BaseController {
	@Autowired
	private ClientBillWarehouseService clientBillWarehouseService;
	@Autowired
	private ClientBillWarehouseItemService clientBillWarehouseItemService;
	@Autowired
	private ClientBarcodeMainService clientBarcodeMainService;

	/**
	 * @auther:Wang
	 * @version:2019年4月26日上午10:48:29
	 * @param:billCode 单据编码
	 * @param:billTypeDictId 单据类型(参考数据字典)
	 * @description pda查询领料单接口返回领料单json
	 */
	@ResponseBody
	@RequestMapping(value = "/billList", method = RequestMethod.POST)
	public ResultMessage getBillList(HttpServletRequest request, String billCode, String billTypeDictId) {
		ResultMessage resultMessage = new ResultMessage();
		List<BillWarehouseVo> billWarehouseList = new ArrayList<BillWarehouseVo>();
		BillWarehouseParamVo paramVo = new BillWarehouseParamVo();
		paramVo.setBillCode(billCode);
		//paramVo.setBillTypeDictId(Long.valueOf(billTypeDictId));
		try {
			billWarehouseList = clientBillWarehouseService.selectListVoByParamVo(paramVo, this.getCommonParam(request));
			if (billWarehouseList.size() <= 0) {
				resultMessage.addErr("系统无该领料单");
			}
			if (billWarehouseList.size() > 0) {
				if (billWarehouseList.get(0).getBillStatusDic().equals(EnumDictBillStatus.FINISHED.getValue())) {
					resultMessage.addErr("当前领料单已完结");
				} else {
					resultMessage.put(billWarehouseList);
					resultMessage.setIsSuccess(true);
				}
			}

		} catch (BusinessException e) {
			resultMessage.addErr("业务运行异常");
		} catch (SQLException e) {
			resultMessage.addErr("SQL查询异常");
		}

		return resultMessage;
	}

	/**
	 * @auther:Wang
	 * @version:2019年4月26日上午11:33:09
	 * @param:
	 * @description pda根据领料单返回领料明细json
	 */
	@ResponseBody
	@RequestMapping(value = "/billItemList", method = RequestMethod.POST)
	public ResultMessage getitemList(HttpServletRequest request, String billId) {
		ResultMessage resultMessage = new ResultMessage();
		List<BillWarehouseItemVo> billWarehouseItemList = new ArrayList<BillWarehouseItemVo>();
		BillWarehouseItemParamVo paramVo = new BillWarehouseItemParamVo();
		paramVo.setBillId(Long.valueOf(billId));

		try {
			billWarehouseItemList = clientBillWarehouseItemService.selectListVoByParamVo(paramVo,
					this.getCommonParam(request));

			resultMessage.put(billWarehouseItemList);
			resultMessage.setIsSuccess(true);
		} catch (BusinessException e) {
			resultMessage.addErr("业务运行异常");
		} catch (SQLException e) {
			resultMessage.addErr("SQL查询异常");
		}
		return resultMessage;
	}

	/**
	 * @auther:Wang
	 * @version:2019年4月29日下午4:02:04
	 * @param:materialId:领料单物料编码
	 * @description 根据领料单物料编码查询出仓库中该物料的推荐库位
	 */
	@ResponseBody
	@RequestMapping(value = "/matBestLocation", method = RequestMethod.POST)
	public ResultMessage getMatBestLocation(HttpServletRequest request, String materialId) {
		ResultMessage resultMessage = new ResultMessage();
		List<BarcodeMainVo> barcodeList = new ArrayList<BarcodeMainVo>();
		try {
			barcodeList = clientBarcodeMainService.bestLocation(Long.parseLong(materialId), this.getCommonParam(request));
			resultMessage.put(barcodeList);
			resultMessage.setIsSuccess(true);
		} catch (BusinessException e) {
			resultMessage.addErr(e.getMessage());
		} catch (SQLException e) {
			resultMessage.addErr("SQL查询异常");
		}
		return resultMessage;
	}

	/**
	 * @auther:Wang
	 * @version:2019年5月13日上午10:18:00
	 * @param:materialId 物料Id
	 ** @param:billId 领料单id
	 ** @param:billItemId 领料明细id
	 * @description 查询当前领料明细下架的条码
	 */
	@ResponseBody
	@RequestMapping(value = "/getOffBarcode", method = RequestMethod.POST)
	public ResultMessage getOffBarcode(HttpServletRequest request, String materialId, String billId,
			String billItemId) {
		ResultMessage resultMessage = new ResultMessage();
		List<BarcodeMainVo> barcodeList = new ArrayList<BarcodeMainVo>();
		BarcodeMainParamVo paramVo = new BarcodeMainParamVo();
		long barcodeStatus = EnumDictBarcodeStatus.OFFSTORE.getValue();// 下架状态
		long barcodePackbox = 0;// 最外箱
		paramVo.setBarcodeStatusDictId(barcodeStatus);
		paramVo.setMaterialId(Long.valueOf(materialId));
		paramVo.setBarcodePackboxId(barcodePackbox);
		paramVo.setInstoreDateDesc("1");// 排序
		paramVo.setBillId(Long.parseLong(billId));
		paramVo.setBillItemId(Long.parseLong(billItemId));
		try {
			barcodeList = clientBarcodeMainService.selectListVoByParamVo(paramVo, this.getCommonParam(request));
			resultMessage.put(barcodeList);
			resultMessage.setIsSuccess(true);
		} catch (BusinessException e) {
			resultMessage.addErr("业务运行异常");
		} catch (SQLException e) {
			resultMessage.addErr("SQL查询异常");
		}
		return resultMessage;
	}
	
	
	/**
	*@auther:Wang
	*@version:2019年5月13日下午1:57:14
	*@param:
	*@description 根据条件得到条码数量
	*/
	@ResponseBody
	@RequestMapping(value = "/getInventory", method = RequestMethod.POST)
	public ResultMessage getInventory(HttpServletRequest request, String materialId) {
		ResultMessage resultMessage = new ResultMessage();
		BarcodeMainParamVo paramVo = new BarcodeMainParamVo();
		paramVo.setMaterialId(Long.valueOf(materialId));
		try {
			resultMessage.setResultCode(
					clientBarcodeMainService.getInventory(paramVo, this.getCommonParam(request)));
			resultMessage.setIsSuccess(true);
		} catch (BusinessException e) {
			resultMessage.addErr("业务运行异常");
		} catch (SQLException e) {
			resultMessage.addErr("SQL查询异常");
		}
		return resultMessage;
	}

	/**
	 * @auther:Wang
	 * @version:2019年4月30日下午1:28:50
	 * @param:materialId 物料ID
	 * @param:barcode 扫描标签
	 * @param:billId 单据ID
	 * @param:billItemId 单据明细ID
	 * @description pda扫描标签进行下架
	 */
	@ResponseBody
	@RequestMapping(value = "/offBarcode", method = RequestMethod.POST)
	public ResultMessage offBarcode(HttpServletRequest request, String materialId, String barcode, String billId,
			String billItemId) {
		ResultMessage resultMessage = new ResultMessage();
		BarcodeMainVo barcodeMainVo = new BarcodeMainVo();
		barcodeMainVo.setMaterialId(Long.valueOf(materialId));
		barcodeMainVo.setBarcode(barcode);
		barcodeMainVo.setBillId(Long.valueOf(billId));
		barcodeMainVo.setBillItemId(Long.valueOf(billItemId));
		resultMessage = clientBarcodeMainService.offBarcode(barcodeMainVo, this.getCommonParam(request));
		return resultMessage;
	}

	/**
	 * @auther:Wang
	 * @version:2019年5月7日上午8:54:17
	 * @param:billId 领料单ID
	 * @description pda领料出库 完结领料
	 */
	@ResponseBody
	@RequestMapping(value = "/outBarcode", method = RequestMethod.POST)
	public ResultMessage outBarcode(HttpServletRequest request, String billId) {
		ResultMessage resultMessage = new ResultMessage();
		try {
			resultMessage = clientBarcodeMainService.outBarcode(billId, this.getCommonParam(request));
		} catch (BusinessException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return resultMessage;
	}
	
}
