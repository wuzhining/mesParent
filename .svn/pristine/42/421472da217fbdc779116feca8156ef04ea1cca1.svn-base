package com.techsoft.service.bill;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.dubbo.config.annotation.Service;
import com.techsoft.common.BaseDao;
import com.techsoft.common.BaseServiceImpl;
import com.techsoft.common.BusinessException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.SQLException;
import com.techsoft.common.enums.EnumAuditStatus;
import com.techsoft.common.enums.EnumDictBillType;
import com.techsoft.common.enums.EnumDictWorkPlanStatus;
import com.techsoft.common.enums.EnumProductType;
import com.techsoft.common.enums.EnumWorkPlanStatus;
import com.techsoft.common.enums.EnumWorkTaskStatus;
import com.techsoft.common.enums.EnumWorkorderStatus;
import com.techsoft.common.enums.EnumYesOrNo;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.utils.Arith;
import com.techsoft.dao.bill.BillWorkorderDao;
import com.techsoft.dao.config.ConfigCodeRuleDao;
import com.techsoft.dao.config.ConfigDictionaryDao;
import com.techsoft.dao.equip.EquipSpecsWorkDao;
import com.techsoft.dao.history.HistoryBillStatusAuditDao;
import com.techsoft.dao.history.HistoryBillStatusDao;
import com.techsoft.dao.product.ProductBomDao;
import com.techsoft.dao.product.ProductMaterialDao;
import com.techsoft.dao.struct.StructProcedureEquipFixtureDao;
import com.techsoft.dao.struct.StructProcedureInstructDao;
import com.techsoft.dao.struct.StructProcedureMaterialDao;
import com.techsoft.dao.struct.StructProcessDao;
import com.techsoft.dao.struct.StructProcessNodeDao;
import com.techsoft.dao.struct.StructProcessProductDao;
import com.techsoft.dao.struct.StructProdlineEquipDao;
import com.techsoft.dao.struct.StructProdlineEquipFixtureDao;
import com.techsoft.dao.struct.StructProductionlineDao;
import com.techsoft.dao.work.WorkPlanEquipDao;
import com.techsoft.dao.work.WorkPlanEquipFixtureDao;
import com.techsoft.dao.work.WorkPlanMaterialDao;
import com.techsoft.dao.work.WorkTaskProcedureDao;
import com.techsoft.entity.bill.BillWorkorderVo;
import com.techsoft.entity.common.BillWorkorder;
import com.techsoft.entity.common.ConfigDictionary;
import com.techsoft.entity.common.EquipSpecsWork;
import com.techsoft.entity.common.ProductBom;
import com.techsoft.entity.common.ProductMaterial;
import com.techsoft.entity.common.StructProcedureEquipFixture;
import com.techsoft.entity.common.StructProcedureInstruct;
import com.techsoft.entity.common.StructProcedureMaterial;
import com.techsoft.entity.common.StructProcess;
import com.techsoft.entity.common.StructProcessNode;
import com.techsoft.entity.common.StructProcessProduct;
import com.techsoft.entity.common.StructProdlineEquip;
import com.techsoft.entity.common.StructProductionline;
import com.techsoft.entity.common.WorkPlanEquip;
import com.techsoft.entity.common.WorkPlanEquipFixture;
import com.techsoft.entity.common.WorkPlanMaterial;
import com.techsoft.entity.common.WorkTaskProcedure;
import com.techsoft.entity.product.ProductBomParamVo;
import com.techsoft.entity.struct.StructProcedureEquipFixtureParamVo;
import com.techsoft.entity.struct.StructProcedureInstructParamVo;
import com.techsoft.entity.struct.StructProcedureMaterialParamVo;
import com.techsoft.entity.struct.StructProcessNodeParamVo;
import com.techsoft.entity.struct.StructProcessProductParamVo;
import com.techsoft.entity.struct.StructProdlineEquipParamVo;
import com.techsoft.entity.struct.StructProductionlineParamVo;

@Service
public class BillWorkorderServiceImpl extends BaseServiceImpl<BillWorkorder> implements BillWorkorderService {
	@Autowired
	private BillWorkorderDao billWorkorderDao;
	@Autowired
	private ProductBomDao productBomDao;
	@Autowired
	private ProductMaterialDao productMaterialDao;
	@Autowired
	private ConfigDictionaryDao configDictionaryDao;
	@Autowired
	private StructProcessProductDao structProcessProductDao;
	@Autowired
	private StructProcessDao structProcessDao;
	@Autowired
	private StructProcessNodeDao structProcessNodeDao;
	@Autowired
	private StructProcedureInstructDao structProcedureInstructDao;
	@Autowired
	private StructProcedureEquipFixtureDao structProcedureEquipFixtureDao;
	@Autowired
	private WorkTaskProcedureDao workTaskProcedureDao;
	@Autowired
	private WorkPlanMaterialDao workPlanMaterialDao;
	@Autowired
	private HistoryBillStatusDao historyBillStatusDao;
	@Autowired
	private HistoryBillStatusAuditDao historyBillStatusAuditDao;
	@Autowired
	private StructProcedureMaterialDao structProcedureMaterialDao;
	@Autowired
	private ConfigCodeRuleDao configCodeRuleDao;
	@Autowired
	private WorkPlanEquipDao workPlanEquipDao;
	@Autowired
	private WorkPlanEquipFixtureDao workPlanEquipFixtureDao;
	@Autowired
	private StructProductionlineDao structProductionlineDao;
	@Autowired
	private StructProdlineEquipDao structProdlineEquipDao;
	@Autowired
	private StructProdlineEquipFixtureDao structProdlineEquipFixtureDao;
	@Autowired
	private EquipSpecsWorkDao equipSpecsWorkDao;

	@Override
	public BaseDao<BillWorkorder> getBaseDao() {
		return billWorkorderDao;
	}

	@Override
	public Class<BillWorkorder> getEntityClass() {
		return BillWorkorder.class;
	}

	@Override
	protected BillWorkorder insertEntity(BillWorkorder insertEntity, CommonParam commonParam)
			throws BusinessException, SQLException {

		BillWorkorder billWorkorder = super.insertEntity(insertEntity, commonParam);

		if (billWorkorder != null) {
			// 增加单据历史记录
			historyBillStatusDao.billHistoryInsert(EnumDictBillType.BILL_TYPE_WORKORDER.getValue(),
					billWorkorder.getWorkorderStatusDictId(), billWorkorder.getId(), billWorkorder.getWorkorderCode(),
					commonParam);
			// 增加单据审批记录
			historyBillStatusAuditDao.billHistoryInsert(EnumDictBillType.BILL_TYPE_WORKORDER.getValue(),
					billWorkorder.getAuditStatusDictId(), billWorkorder.getId(), billWorkorder.getWorkorderCode(),
					commonParam);
		}
		return billWorkorder;
	}

	@Override
	protected BillWorkorder updatePartEntity(BillWorkorder entity, CommonParam commonParam)
			throws BusinessException, SQLException {
		BillWorkorder billWorkorder = super.updatePartEntity(entity, commonParam);
		if (billWorkorder != null) {
			// 增加单据历史记录
			historyBillStatusDao.billHistoryInsert(EnumDictBillType.BILL_TYPE_WORKORDER.getValue(),
					billWorkorder.getWorkorderStatusDictId(), billWorkorder.getId(), billWorkorder.getWorkorderCode(),
					commonParam);
			// 增加单据审批记录,审批id不为未审批状态时，表示已修改审批状态
			if (billWorkorder.getAuditStatusDictId() != EnumAuditStatus.UNAUDITED.getValue()) {
				historyBillStatusAuditDao.billHistoryInsert(EnumDictBillType.BILL_TYPE_WORKORDER.getValue(),
						billWorkorder.getAuditStatusDictId(), billWorkorder.getId(), billWorkorder.getWorkorderCode(),
						commonParam);
			}

		}
		return billWorkorder;
	}

	@Override
	protected BillWorkorder updateEntity(BillWorkorder entity, CommonParam commonParam)
			throws BusinessException, SQLException {
		return super.updateEntity(entity, commonParam);
	}

	@Override
	public ResultMessage updateAudit(BillWorkorderVo billWorkorderVo, CommonParam commonParam) {
		// TODO Auto-generated method stub
		ResultMessage resultMessage = new ResultMessage();
		ProductBomParamVo productBomParamVo = new ProductBomParamVo();
		ProductMaterial productMaterial = new ProductMaterial();
		ConfigDictionary configDictionary = new ConfigDictionary();

		if (billWorkorderVo.getBomId() == null) {
			resultMessage.setIsSuccess(false);
			resultMessage.setMessage("该工单对应BOMID,请先维护!");
		}

		if (EnumAuditStatus.AUDITED.getValue().equals(billWorkorderVo.getAuditStatusDictId())) {
			resultMessage.setIsSuccess(false);
			resultMessage.setMessage("该工单未审核通过，不能进行此操作!");
		}

		List<ProductBom> bomTreeList = new ArrayList<ProductBom>();
		Map<Long, ProductBom> processProductBomMap = new HashMap();
		List<StructProcessNode> allProcedureNodeList = new ArrayList<StructProcessNode>();
		List<StructProcedureInstruct> allProcedureInstructList = new ArrayList<StructProcedureInstruct>();
		List<StructProcedureMaterial> allProcedureMaterialList = new ArrayList<StructProcedureMaterial>();
		List<StructProcedureEquipFixture> allProcedureEquipFixtureList = new ArrayList<StructProcedureEquipFixture>();
		List<WorkPlanEquip> allPlanEquipList = new ArrayList<WorkPlanEquip>();
		/**
		 * checkIs = true 判断是否审核成功 true表示可以生成 工作工序任务、工作物料计划、工作设备计划、工作工具计划 反之
		 * 返回审核失败的具体消息给WEB页面
		 */
		boolean checkIs = true;
		// 工单产品 BOM ID
		Long bomId = billWorkorderVo.getBomId();
		// 匹配出产线id
		Long productionlineId = null;

		productBomParamVo.setId(bomId);
		productBomParamVo.setTenantId(commonParam.getTenantId());

		try {
			bomTreeList = productBomDao.selectListBomTree(bomId, commonParam);

			if ((bomTreeList != null) && (!bomTreeList.isEmpty())) {
				labe: for (ProductBom productBom : bomTreeList) {

					productMaterial = productMaterialDao.selectById(productBom.getMaterialId());
					configDictionary = configDictionaryDao.selectById(productMaterial.getProductTypeDictId());

					if (!EnumProductType.RAWMATERIAL.getValue().equals(productMaterial.getProductTypeDictId())) {

						// 根据产品ID和物料规格ID查询是否存在产品工艺路线
						StructProcessProductParamVo structProcessProduct = new StructProcessProductParamVo();
						structProcessProduct.setProductId(productMaterial.getProductId());
						structProcessProduct.setMaterialId(productMaterial.getId());
						List<StructProcessProduct> listPro = structProcessProductDao
								.selectListByParamVo(structProcessProduct);
						if (listPro.size() == 0) {
							resultMessage.setIsSuccess(false);
							checkIs = false;
							resultMessage.setMessage("物品规格编码为" + productMaterial.getMaterialCode() + "的"
									+ configDictionary.getDictName() + "不存在产品工艺路线请先维护!");
							break;
						}

						// 查询工艺路线是否存在
						StructProcess structProcess = structProcessDao.selectById(listPro.get(0).getProcessId());
						if (structProcess == null) {
							resultMessage.setIsSuccess(false);
							checkIs = false;
							resultMessage.setMessage("工艺路线不存在,请先维护!");
							break;
						}
					 
						processProductBomMap.put(structProcess.getId(), productBom);

						// 查询工艺路线工序节点是否存在
						StructProcessNodeParamVo structProcessNode = new StructProcessNodeParamVo();
						structProcessNode.setProcessId(structProcess.getId());
						List<StructProcessNode> nodeList = structProcessNodeDao.selectListByParamVo(structProcessNode);
						if ((nodeList == null) || (nodeList.isEmpty())) {
							resultMessage.setIsSuccess(false);
							checkIs = false;
							resultMessage.setMessage(structProcess.getId() + "工艺路线不存在工序,请先维护!");
							break;
						}

						StructProductionlineParamVo productionlineParamVo = new StructProductionlineParamVo();
						productionlineParamVo.setTenantId(commonParam.getTenantId());
						productionlineParamVo.setIsValid(EnumYesOrNo.YES.getValue());
						productionlineParamVo.setFactoryId(billWorkorderVo.getFactoryId());
						productionlineParamVo.setWorkshopId(billWorkorderVo.getWorkshopId());
						List<StructProductionline> productionlineList = structProductionlineDao
								.selectListByParamVo(productionlineParamVo);

						if ((productionlineList == null) || (productionlineList.isEmpty())) {
							resultMessage.setIsSuccess(false);
							resultMessage.setMessage("找不到可用的产线,请先维护!");
							checkIs = false;
							break;
						}

						if (checkIs == true) {
							allProcedureNodeList.addAll(nodeList);

							// 判断每个工序是否存在工序指令
							for (StructProcessNode ProcessNode : nodeList) {
								StructProcedureInstructParamVo procedureInstructParamVo = new StructProcedureInstructParamVo();
								procedureInstructParamVo.setTenantId(commonParam.getTenantId());
								procedureInstructParamVo.setProcessNodeId(ProcessNode.getId());
								List<StructProcedureInstruct> procedureInstructList = structProcedureInstructDao
										.selectListByParamVo(procedureInstructParamVo);
								if ((procedureInstructList == null) || (procedureInstructList.isEmpty())) {
									resultMessage.setIsSuccess(false);
									checkIs = false;
									resultMessage.setMessage(ProcessNode.getNodeName() + "工序不存在工序指令,请先维护!");
									break labe;
								} else {
									allProcedureInstructList.addAll(procedureInstructList);

									// 判断每个工序是否维护工序物料清单
									StructProcedureMaterialParamVo procedureMaterial = new StructProcedureMaterialParamVo();
									procedureMaterial.setTenantId(commonParam.getTenantId());
									procedureMaterial.setProcessNodeId(ProcessNode.getId());
									List<StructProcedureMaterial> procedureMaterialList = structProcedureMaterialDao
											.selectListByParamVo(procedureMaterial);
									if ((procedureMaterialList != null) && (!procedureMaterialList.isEmpty())) {
										allProcedureMaterialList.addAll(procedureMaterialList);
									}

									// 判断每个工序是否维护工序物料清单
									StructProcedureEquipFixtureParamVo procedureEquipFixture = new StructProcedureEquipFixtureParamVo();
									procedureEquipFixture.setTenantId(commonParam.getTenantId());
									procedureEquipFixture.setProcessNodeId(ProcessNode.getId());
									List<StructProcedureEquipFixture> procedureEquipFixtureList = structProcedureEquipFixtureDao
											.selectListByParamVo(procedureEquipFixture);
									if ((procedureEquipFixtureList != null) && (!procedureEquipFixtureList.isEmpty())) {
										allProcedureEquipFixtureList.addAll(procedureEquipFixtureList);
									}

									if (productionlineId == null) {// 如果没指定产线id，匹配出来
										prodline: for (StructProcedureInstruct procedureInstruct : procedureInstructList) {
											if (procedureInstruct.getEquipSpecsWorkId() != null) {
												StructProdlineEquipParamVo prodlineEquipParamVo = new StructProdlineEquipParamVo();
												prodlineEquipParamVo.setTenantId(commonParam.getTenantId());
												prodlineEquipParamVo
														.setEquipSpecsWorkId(procedureInstruct.getEquipSpecsWorkId());
												List<StructProdlineEquip> prodlineEquipList = structProdlineEquipDao
														.selectListByParamVo(prodlineEquipParamVo);
												if ((prodlineEquipList != null) && (!prodlineEquipList.isEmpty())) {

													for (StructProdlineEquip prodlineEquip : prodlineEquipList) {
														if (prodlineEquip.getEquipSpecsWorkId()
																.equals(procedureInstruct.getEquipSpecsWorkId())) {
															if (prodlineEquipList.size() == 1) {// 其中有一个代表某产线的特别的设备
																// 匹配出产线id
																productionlineId = prodlineEquip.getProductionlineId();
																break prodline;
															}

														}
													}
												}
											}
										}
									}

								}

								allProcedureNodeList.add(ProcessNode);
							}

							for (StructProcedureInstruct procedureInstruct : allProcedureInstructList) {
								// 找到设备清单
								if (procedureInstruct.getEquipSpecsWorkId() != null) {
									StructProdlineEquipParamVo prodlineEquipParamVo = new StructProdlineEquipParamVo();
									prodlineEquipParamVo.setTenantId(commonParam.getTenantId());
									prodlineEquipParamVo.setEquipSpecsWorkId(procedureInstruct.getEquipSpecsWorkId());
									prodlineEquipParamVo.setProductionlineId(productionlineId);
									List<StructProdlineEquip> prodlineEquipList = structProdlineEquipDao
											.selectListByParamVo(prodlineEquipParamVo);
									if ((prodlineEquipList != null) && (!prodlineEquipList.isEmpty())) {

										if (prodlineEquipList.size() == procedureInstruct.getQuantityEquip()) {
											for (StructProdlineEquip prodlineEquip : prodlineEquipList) {
												if (prodlineEquip.getEquipSpecsWorkId()
														.equals(procedureInstruct.getEquipSpecsWorkId())) {

													WorkPlanEquip workPlanEquip = new WorkPlanEquip();
													workPlanEquip
															.setProcessNodeId(procedureInstruct.getProcessNodeId());
													workPlanEquip.setInstructId(procedureInstruct.getId());
													workPlanEquip
															.setEquipSpecsWorkId(prodlineEquip.getEquipSpecsWorkId());
													workPlanEquip.setEquipWorkId(prodlineEquip.getEquipWorkId());
													allPlanEquipList.add(workPlanEquip);
												}

											}
										} else {
											resultMessage.setIsSuccess(false);
											checkIs = false;
											EquipSpecsWork equipSpecsWork = equipSpecsWorkDao
													.selectById(procedureInstruct.getEquipSpecsWorkId());
											resultMessage.setMessage(
													"产线工序指定的设备" + equipSpecsWork.getEquipSpecsName() + "的数量不一至,请先维护!");
											break labe;
										}
									} else {
										resultMessage.setIsSuccess(false);
										checkIs = false;
										EquipSpecsWork equipSpecsWork = equipSpecsWorkDao
												.selectById(procedureInstruct.getEquipSpecsWorkId());
										resultMessage.setMessage(
												"产线找不到工序指定的设备" + equipSpecsWork.getEquipSpecsName() + ",请先维护!");
										break labe;
									}
								}

								// 找到工具清单

							}
						}
					}
				}
			} else {
				resultMessage.setIsSuccess(false);
				checkIs = false;
				resultMessage.setMessage("该工单产品对应BOM不存在,请先维护!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// if ((bomTreeList != null) && (!bomTreeList.isEmpty())) {
		//
		// List<ProductBomVo> materialBomTreeList = new
		// ArrayList<ProductBomVo>();
		// for (ProductBom productBom : bomTreeList) {
		//
		// ProductMaterial material =
		// productMaterialDao.selectById(productBom.getMaterialId());
		// if
		// (EnumProductType.RAWMATERIAL.getValue().equals(material.getProductTypeDictId()))
		// { // 如果是物料
		// ProductBomVo productBomVo = new ProductBomVo(productBom);
		// productBomVo.setProductMaterial(material);
		// materialBomTreeList.add(productBomVo);
		// }
		// }
		// } else {
		// resultMessage.setIsSuccess(false);
		// resultMessage.setMessage("该工单产品对应BOM物料不存在,请先维护!");
		// }

		if ((allProcedureMaterialList == null) || (allProcedureMaterialList.isEmpty())) {
			resultMessage.setIsSuccess(false);
			checkIs = false;
			resultMessage.setMessage("工序不存在工序物料清单,请先维护!");
		}

		if (checkIs == true) {

			try {

				List<WorkTaskProcedure> taskProcedureList = new ArrayList<WorkTaskProcedure>();
				List<WorkPlanMaterial> planMaterialList = new ArrayList<WorkPlanMaterial>();
				List<WorkPlanEquipFixture> planEquipFixtureList = new ArrayList<WorkPlanEquipFixture>();
				List<WorkPlanEquip> planEquipList = new ArrayList<WorkPlanEquip>();

				Integer index = 0;
				Integer index_Equip = 100;
				Integer index_Mat = 0;
				String idString = "";
				Long taskProceId = workTaskProcedureDao.getIdValue();
				Long planMatId = workPlanMaterialDao.getIdValue();
				Long planEquipFixtureId = workPlanEquipFixtureDao.getIdValue();
				Long planEquipId = workPlanEquipDao.getIdValue(); 
				DecimalFormat locationdfID = new DecimalFormat("000000");
				Long idLong = 0L;

				for (StructProcessNode allNode : allProcedureNodeList) {
					// 工作工序任务
					WorkTaskProcedure wp = new WorkTaskProcedure();
					index++;
					idString = locationdfID.format(index);
					idLong = Long.valueOf(taskProceId.toString() + idString);
					wp.setId(idLong);
					wp.setTenantId(commonParam.getTenantId());
					wp.setFactoryId(billWorkorderVo.getFactoryId());
					wp.setBillWorkorderId(billWorkorderVo.getId());
					wp.setWorkshopId(billWorkorderVo.getWorkshopId());
					wp.setProcessId(allNode.getProcessId());
					wp.setProcessNodeId(allNode.getId());
					ProductBom processProductBom = processProductBomMap.get(allNode.getProcessId()); 
					wp.setBomId(processProductBom.getId());
					wp.setProductId(processProductBom.getProductId());
					wp.setMaterialId(processProductBom.getMaterialId());
					wp.setWorktime(allNode.getWorktime());
					wp.setExecutiveTypeDictId(allNode.getExecutiveTypeDictId());
					wp.setBuffertimePost(allNode.getBuffertimePost());
					wp.setBuffertimePre(allNode.getBuffertimePre());
					wp.setSortNo(allNode.getSortNo());
					wp.setPriority(billWorkorderVo.getPriority());
					wp.setQuantity(billWorkorderVo.getQuantity());
					wp.setQuantityInput(billWorkorderVo.getQuantityInput());
					wp.setQuantityOutput(billWorkorderVo.getQuantityOutput());
					// 自动生成单据编码
					String taskCode = configCodeRuleDao.createCode(WorkTaskProcedure.class.getName(), null, null,
							commonParam);
					wp.setTaskCode(taskCode);
					wp.setTaskStatusDictId(EnumWorkTaskStatus.NOTSTARTED.getValue());
					wp.setTimePlanStart(billWorkorderVo.getTimePlanStart());
					wp.setTimePlanEnd(billWorkorderVo.getTimePlanEnd());
					wp.setTimeActualStart(billWorkorderVo.getTimeActualStart());
					wp.setTimeActualEnd(billWorkorderVo.getTimeActualEnd());
					wp.setIsLocked(EnumYesOrNo.NO.getValue());
					wp.setModifyUserId(Long.valueOf(commonParam.getUserId()));
					wp.setCreateUserId(Long.valueOf(commonParam.getUserId()));

					wp.setProductionlineId(productionlineId);
					taskProcedureList.add(wp);

					// 设备计划
					if ((allPlanEquipList != null) && (!allPlanEquipList.isEmpty())) {
						for (WorkPlanEquip workPlanEquip : allPlanEquipList) {
							if (workPlanEquip.getProcessNodeId().equals(allNode.getId())) {// 该个工序的

								index_Equip++;
								idString = locationdfID.format(index_Equip);
								workPlanEquip.setId(Long.valueOf(planEquipId.toString() + idString)); 
								workPlanEquip.setTenantId(commonParam.getTenantId());
								workPlanEquip.setBillWorkorderId(billWorkorderVo.getId());
								workPlanEquip.setWorkshopId(billWorkorderVo.getWorkshopId());
								workPlanEquip.setTaskId(idLong);
								workPlanEquip.setIsLocked(EnumYesOrNo.NO.getValue());
								workPlanEquip.setPlanStatusDictId(EnumWorkPlanStatus.NOTSTARTED.getValue());
								workPlanEquip.setFactoryId(billWorkorderVo.getFactoryId());
								workPlanEquip.setTimePlanStart(billWorkorderVo.getTimePlanStart());
								workPlanEquip.setTimePlanEnd(billWorkorderVo.getTimePlanEnd());
								workPlanEquip.setTimeActualStart(billWorkorderVo.getTimeActualStart());
								workPlanEquip.setTimeActualEnd(billWorkorderVo.getTimeActualEnd());
								workPlanEquip.setModifyUserId(Long.valueOf(commonParam.getUserId()));
								workPlanEquip.setCreateUserId(Long.valueOf(commonParam.getUserId()));

								workPlanEquip.setQuantity(billWorkorderVo.getQuantity());
								workPlanEquip.setQuantityInput(billWorkorderVo.getQuantityInput());
								workPlanEquip.setQuantityOutput(billWorkorderVo.getQuantityOutput());
								planEquipList.add(workPlanEquip);

							}
						}
					}

					// 工作物料计划
					if ((allProcedureMaterialList != null) && (!allProcedureMaterialList.isEmpty())) {
						for (StructProcedureMaterial structProcedureMaterial : allProcedureMaterialList) {
							if (structProcedureMaterial.getProcessNodeId().equals(allNode.getId()))// 该个工序的物料清单
							{
								for (ProductBom productBom : bomTreeList) {
									if (structProcedureMaterial.getMaterialId().equals(productBom.getMaterialId())) {
										index_Mat++;
										idString = locationdfID.format(index_Mat);

										WorkPlanMaterial wm = new WorkPlanMaterial();
										wm.setId(Long.valueOf(planMatId.toString() + idString));
										wm.setTenantId(commonParam.getTenantId());
										wm.setFactoryId(billWorkorderVo.getFactoryId());
										wm.setBillWorkorderId(billWorkorderVo.getId());
										wm.setWorkshopId(billWorkorderVo.getWorkshopId());
										wm.setTaskId(idLong);
										wm.setWorkshopId(billWorkorderVo.getWorkshopId());
										wm.setProcessNodeId(allNode.getId());
										wm.setInstructId(structProcedureMaterial.getInstructId());
										wm.setBomId(productBom.getId());
										wm.setProductId(structProcedureMaterial.getProductId());
										wm.setMaterialId(structProcedureMaterial.getMaterialId());
										wm.setPlanStatusDictId(EnumDictWorkPlanStatus.BF01.getValue());
										wm.setQuantity(
												Arith.mul(billWorkorderVo.getQuantity(), productBom.getQuantity()));
										wm.setQuantityInput(
												Arith.mul(billWorkorderVo.getQuantity(), productBom.getQuantity()));
										wm.setTimePlanStart(billWorkorderVo.getTimePlanStart());
										wm.setTimePlanEnd(billWorkorderVo.getTimePlanEnd());
										wm.setTimeActualStart(billWorkorderVo.getTimeActualStart());
										wm.setTimeActualEnd(billWorkorderVo.getTimeActualEnd());
										wm.setIsLocked(EnumYesOrNo.NO.getValue());
										wm.setRemark(billWorkorderVo.getRemark());
										wm.setModifyUserId(Long.valueOf(commonParam.getUserId()));
										wm.setCreateUserId(Long.valueOf(commonParam.getUserId()));
										planMaterialList.add(wm);
									}
								}

							}
						}
					}

				}

				// 工作工序任务
				workTaskProcedureDao.insertBatch(taskProcedureList, commonParam);
				// 工作物料计划
				workPlanMaterialDao.insertBatch(planMaterialList, commonParam);
				// 工作设备计划
				workPlanEquipDao.insertBatch(planEquipList, commonParam);

				// 修改工单状态为已审核
				BillWorkorder wo = new BillWorkorder();
				wo.setId(billWorkorderVo.getId());
				wo.setIsLocked(EnumYesOrNo.NO.getValue());
				wo.setAuditStatusDictId(EnumAuditStatus.AUDITED.getValue());
				wo.setWorkorderStatusDictId(EnumWorkorderStatus.AP02.getValue());
				wo.setModifyUserId(Long.valueOf(commonParam.getUserId()));
				wo.setModifyUserId(Long.valueOf(commonParam.getUserId()));
				billWorkorderDao.updateBatch(wo, commonParam);

				historyBillStatusDao.billHistoryInsert(EnumDictBillType.BILL_TYPE_WORKORDER.getValue(),
						wo.getWorkorderStatusDictId(), billWorkorderVo.getId(), billWorkorderVo.getWorkorderCode(),
						commonParam);
				historyBillStatusAuditDao.billHistoryInsert(EnumDictBillType.BILL_TYPE_WORKORDER.getValue(),
						wo.getAuditStatusDictId(), billWorkorderVo.getId(), billWorkorderVo.getWorkorderCode(),
						commonParam);
				resultMessage.setIsSuccess(true);
				resultMessage.setMessage(billWorkorderVo.getWorkorderCode() + "工单审核成功!");
			} catch (BusinessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return resultMessage;
	}
}
