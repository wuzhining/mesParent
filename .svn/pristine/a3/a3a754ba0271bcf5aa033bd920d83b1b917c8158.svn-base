package com.techsoft.client.service.firm;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageInfo;
import com.techsoft.common.BaseClientServiceImpl;
import com.techsoft.common.BaseService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.utils.BeanUtil;

import com.techsoft.entity.common.FirmScheduling;
import com.techsoft.entity.common.StructFactory;
import com.techsoft.entity.firm.FirmSchedulingVo;
import com.techsoft.entity.firm.FirmSchedulingParamVo;
import com.techsoft.service.firm.FirmSchedulingService;
import com.techsoft.service.struct.StructFactoryService;

@org.springframework.stereotype.Service
public class ClientFirmSchedulingServiceImpl extends BaseClientServiceImpl<FirmScheduling>
		implements ClientFirmSchedulingService {
	@com.alibaba.dubbo.config.annotation.Reference
	private FirmSchedulingService firmSchedulingService;
	@com.alibaba.dubbo.config.annotation.Reference
	private StructFactoryService structFactoryService;

	@Override
	public BaseService<FirmScheduling> getBaseService() {
		return firmSchedulingService;
	}

	private FirmSchedulingVo getVo(FirmScheduling firmScheduling, CommonParam commonParam)
			throws BusinessException, SQLException {
		FirmSchedulingVo vo = new FirmSchedulingVo(firmScheduling);
		if (vo.getFactoryId() != null && vo.getFactoryId() > 0L) {
			StructFactory structFactory = structFactoryService.selectById(vo.getFactoryId(), commonParam);
			if (structFactory != null) {
				vo.setStructFactory(structFactory);
			}
		}
		return vo;
	}

	private FirmSchedulingVo getExtendVo(FirmScheduling firmScheduling, CommonParam commonParam)
			throws BusinessException, SQLException {
		FirmSchedulingVo vo = this.getVo(firmScheduling, commonParam);

		return vo;
	}

	private List<FirmSchedulingVo> getVoList(List<FirmScheduling> list, CommonParam commonParam)
			throws BusinessException, SQLException {
		List<FirmSchedulingVo> voList = new ArrayList<FirmSchedulingVo>();
		for (FirmScheduling entity : list) {
			voList.add(this.getVo(entity, commonParam));
		}

		return voList;
	}

	private List<FirmSchedulingVo> getExtendVoList(List<FirmScheduling> list, CommonParam commonParam)
			throws BusinessException, SQLException {
		List<FirmSchedulingVo> voList = new ArrayList<FirmSchedulingVo>();
		for (FirmScheduling entity : list) {
			voList.add(this.getExtendVo(entity, commonParam));
		}

		return voList;
	}

	public FirmSchedulingVo getVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		FirmScheduling entity = this.getBaseService().selectById(id, commonParam);

		return this.getVo(entity, commonParam);
	}

	public List<FirmSchedulingVo> selectListVoByParamVo(FirmSchedulingParamVo firmScheduling, CommonParam commonParam)
			throws BusinessException, SQLException {
		if (firmScheduling == null) {
			firmScheduling = new FirmSchedulingParamVo();
		}
		firmScheduling.setTenantId(commonParam.getTenantId());

		List<FirmScheduling> list = (List<FirmScheduling>) this.getBaseService().selectListByParamVo(firmScheduling,
				commonParam);

		return getVoList(list, commonParam);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public PageInfo<FirmSchedulingVo> selectPageVoByParamVo(FirmSchedulingParamVo firmScheduling,
			CommonParam commonParam, int pageNo, int pageSize) throws BusinessException, SQLException {
		if (firmScheduling == null) {
			firmScheduling = new FirmSchedulingParamVo();
		}
		firmScheduling.setTenantId(commonParam.getTenantId());

		PageInfo<FirmScheduling> list = (PageInfo<FirmScheduling>) this.getBaseService()
				.selectPageByParamVo(firmScheduling, commonParam, pageNo, pageSize);
		List<FirmSchedulingVo> volist = new ArrayList<FirmSchedulingVo>();

		Iterator<FirmScheduling> iter = list.getList().iterator();
		FirmSchedulingVo vo = null;
		while (iter.hasNext()) {
			vo = this.getVo(iter.next(), commonParam);
			volist.add(vo);
		}

		Page<FirmSchedulingVo> vpage = new Page<FirmSchedulingVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());

		return new PageInfo(vpage);
	}

	public FirmSchedulingVo getExtendVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		FirmScheduling entity = this.getBaseService().selectById(id, commonParam);

		return this.getExtendVo(entity, commonParam);
	}

	public List<FirmSchedulingVo> selectListExtendVoByParamVo(FirmSchedulingParamVo firmScheduling,
			CommonParam commonParam) throws BusinessException, SQLException {
		if (firmScheduling == null) {
			firmScheduling = new FirmSchedulingParamVo();
		}
		firmScheduling.setTenantId(commonParam.getTenantId());

		List<FirmScheduling> list = (List<FirmScheduling>) this.getBaseService().selectListByParamVo(firmScheduling,
				commonParam);

		return this.getExtendVoList(list, commonParam);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public PageInfo<FirmSchedulingVo> selectPageExtendVoByParamVo(FirmSchedulingParamVo firmScheduling,
			CommonParam commonParam, int pageNo, int pageSize) throws BusinessException, SQLException {
		if (firmScheduling == null) {
			firmScheduling = new FirmSchedulingParamVo();
		}
		firmScheduling.setTenantId(commonParam.getTenantId());

		PageInfo<FirmScheduling> list = (PageInfo<FirmScheduling>) this.getBaseService()
				.selectPageByParamVo(firmScheduling, commonParam, pageNo, pageSize);
		List<FirmSchedulingVo> volist = new ArrayList<FirmSchedulingVo>();

		Iterator<FirmScheduling> iter = list.getList().iterator();
		FirmSchedulingVo vo = null;
		while (iter.hasNext()) {
			vo = this.getExtendVo(iter.next(), commonParam);
			volist.add(vo);
		}

		Page<FirmSchedulingVo> vpage = new Page<FirmSchedulingVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());

		return new PageInfo(vpage);
	}

	public ResultMessage saveOrUpdate(FirmSchedulingParamVo firmSchedulingParamVo, CommonParam commonParam) {
		ResultMessage resultMessage = new ResultMessage();
		FirmScheduling firmScheduling = null;
		if (firmSchedulingParamVo.getFactoryId() == null) {
			resultMessage.addErr("所属工厂不能为空");
			return resultMessage;
		}
		if (firmSchedulingParamVo.getSchedulingName() == null) {
			resultMessage.addErr("班别名称不能为空");
			return resultMessage;
		}
		if (firmSchedulingParamVo.getSchedulingCode() == null) {
			resultMessage.addErr("班别编码不能为空");
			return resultMessage;
		}
		if (firmSchedulingParamVo.getIsValid() == null) {
			resultMessage.addErr("是否有效不能为空");
			return resultMessage;
		}
		try {
			if (firmSchedulingParamVo.getId() == null) {// 新增

				firmSchedulingParamVo.setTenantId(commonParam.getTenantId());
				firmScheduling = firmSchedulingService.saveOrUpdate(firmSchedulingParamVo, commonParam);
				resultMessage.setIsSuccess(true);
			} else { // 修改
				FirmScheduling firmSchedulingVoTemp = this.selectById(firmSchedulingParamVo.getId(), commonParam);

				BeanUtil.copyNotNullProperties(firmSchedulingVoTemp, firmSchedulingParamVo);

				firmScheduling = firmSchedulingService.saveOrUpdate(firmSchedulingVoTemp, commonParam);

				resultMessage.setIsSuccess(true);
			}

			resultMessage.setBaseEntity(firmScheduling);
		} catch (BusinessException e) {
			resultMessage.addErr(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return resultMessage;
	}
}
