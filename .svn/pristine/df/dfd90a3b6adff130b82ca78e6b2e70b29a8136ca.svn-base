package com.techsoft.controller.equip;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageInfo;

import com.techsoft.common.BusinessException;
import com.techsoft.common.constants.Constants;
import com.techsoft.common.enums.EnumDictionary;
import com.techsoft.common.maps.MapUserStatus;
import com.techsoft.common.maps.MapYesOrNo;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.persistence.ReturnPageInfo;
import com.techsoft.common.SQLException;
import com.techsoft.controller.BaseController;
import com.techsoft.client.service.config.ClientConfigDictionaryService;
import com.techsoft.client.service.equip.ClientEquipSpecsFixtureService;
import com.techsoft.client.service.firm.ClientFirmPartnerService;
import com.techsoft.entity.equip.EquipSpecsFixtureVo;
import com.techsoft.entity.firm.FirmPartnerParamVo;
import com.techsoft.entity.common.ConfigDictionary;
import com.techsoft.entity.common.FirmPartner;
import com.techsoft.entity.equip.EquipSpecsFixtureParamVo;

@Controller
@RequestMapping("/equip/equipSpecsFixture")
public class EquipSpecsFixtureController extends BaseController {
	@Autowired
	private ClientEquipSpecsFixtureService clientEquipSpecsFixtureService;
	@Autowired
	private ClientConfigDictionaryService clientConfigDictionaryService;
	@Autowired
	private ClientFirmPartnerService clientFirmPartnerService;

	/**
	 * 页面关联数据初始化
	 * 
	 * @param modelAndView
	 */
	public void initData(ModelAndView modelAndView) {
		// 取治具类型集合
		List<ConfigDictionary> fixtureTypeDict;
		try {
			// 取治具状态集合
			List<ConfigDictionary> fixtureStatus = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.FIXTURE_STATUS.getValue());
			modelAndView.addObject("fixtureStatus", fixtureStatus);
			fixtureTypeDict = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.FIXTURE_TYPE.getValue());
			// 取供应商集合
			FirmPartnerParamVo firmPartnerParamVo = new FirmPartnerParamVo();
			List<FirmPartner> firmPartner = clientFirmPartnerService.selectListByParamVo(firmPartnerParamVo,
					this.getCommonParam(null));
			List<FirmPartner> firmPartner3 = new ArrayList<FirmPartner>();
			for (FirmPartner firmPartner2 : firmPartner) {
				if (firmPartner2.getPartnerTypeDictId() == 10313) {// 得到供应商
					firmPartner3.add(firmPartner2);
				}
			}
			modelAndView.addObject("firmPartner", firmPartner3);
			modelAndView.addObject("fixtureTypeDict", fixtureTypeDict);
		} catch (Exception e) {
			e.printStackTrace();
		}
		modelAndView.addObject("mapYesOrNo", MapYesOrNo.getMap());
	}

	@RequestMapping("/list")
	public ModelAndView list(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("equip/equipSpecsFixture-list");
		return modelAndView;
	}

	@RequestMapping("/edit")
	public ModelAndView edit(HttpServletRequest request, Long id) {
		ModelAndView modelAndView = new ModelAndView();
		// 取治具类型集合
		List<ConfigDictionary> fixtureTypeDict;
		try {
			fixtureTypeDict = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.FIXTURE_TYPE.getValue());
			// 取治具状态集合
			List<ConfigDictionary> fixtureStatus = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.FIXTURE_STATUS.getValue());
			// 取供应商集合
			FirmPartnerParamVo firmPartnerParamVo = new FirmPartnerParamVo();
			List<FirmPartner> firmPartner = clientFirmPartnerService.selectListByParamVo(firmPartnerParamVo,
					this.getCommonParam(null));
			List<FirmPartner> firmPartner3 = new ArrayList<FirmPartner>();
			for (FirmPartner firmPartner2 : firmPartner) {
				if (firmPartner2.getPartnerTypeDictId() == 10313) {// 得到供应商
					firmPartner3.add(firmPartner2);
				}
			}
			modelAndView.addObject("firmPartner", firmPartner3);
			modelAndView.addObject("fixtureStatus", fixtureStatus);
			modelAndView.addObject("fixtureTypeDict", fixtureTypeDict);
			modelAndView.setViewName("equip/equipSpecsFixture-edit");
			EquipSpecsFixtureVo entity = new EquipSpecsFixtureVo();
			if (id != null) {
				entity = clientEquipSpecsFixtureService.getVoByID(id, this.getCommonParam(request));

			}
			modelAndView.addObject("entity", entity);
		} catch (BusinessException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		initData(modelAndView);
		return modelAndView;
	}

	@ResponseBody
	@RequestMapping("/list/json")
	@SuppressWarnings("rawtypes")
	public ReturnPageInfo listJson(HttpServletRequest request, EquipSpecsFixtureParamVo equipSpecsFixtureParamVo,
			Integer pageIndex, Integer pageSize) {
		PageInfo pageInfo = null;
		Integer pageNumber = 0;
		if (pageSize != null) {
			pageNumber = pageSize;
		} else {
			pageNumber = Constants.SEARCH_PAGE_SIZE;
		}
		try {
			if (equipSpecsFixtureParamVo == null) {
				equipSpecsFixtureParamVo = new EquipSpecsFixtureParamVo();
			}
			pageInfo = clientEquipSpecsFixtureService.selectPageVoByParamVo(equipSpecsFixtureParamVo,
					this.getCommonParam(request), pageIndex, pageNumber);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage save(HttpServletRequest request, EquipSpecsFixtureParamVo equipSpecsFixtureParamVo) {
		ResultMessage resultMessage = new ResultMessage();

		equipSpecsFixtureParamVo.setModifyUserId(getLoginUserId(request));
		resultMessage = clientEquipSpecsFixtureService.saveOrUpdate(equipSpecsFixtureParamVo,
				this.getCommonParam(request));

		return resultMessage;
	}

}
