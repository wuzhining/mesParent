package com.techsoft.controller.bill;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageInfo;
import com.techsoft.client.service.bill.ClientBillSaleorderItemService;
import com.techsoft.client.service.bill.ClientBillWarehouseService;
import com.techsoft.client.service.bill.ClientBillWorkorderService;
import com.techsoft.client.service.config.ClientConfigDictionaryService;
import com.techsoft.client.service.product.ClientProductMaterialService;
import com.techsoft.client.service.struct.ClientStructProductionlineService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.SQLException;
import com.techsoft.common.constants.Constants;
import com.techsoft.common.enums.EnumAuditStatus;
import com.techsoft.common.enums.EnumAlarmStatus;
import com.techsoft.common.enums.EnumBillStatus;
import com.techsoft.common.enums.EnumBillType;
import com.techsoft.common.enums.EnumDictionary;
import com.techsoft.common.maps.MapUserStatus;
import com.techsoft.common.maps.MapYesOrNo;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.persistence.ReturnPageInfo;
import com.techsoft.common.utils.JsonUtils;
import com.techsoft.controller.BaseController;
import com.techsoft.entity.bill.BillPurchaseVo;
import com.techsoft.entity.bill.BillSaleorderItemParamVo;
import com.techsoft.entity.bill.BillSaleorderVo;
import com.techsoft.entity.bill.BillWarehouseParamVo;
import com.techsoft.entity.bill.BillWarehouseVo;
import com.techsoft.entity.common.BillSaleorder;
import com.techsoft.entity.common.BillSaleorderItem;
import com.techsoft.entity.common.BillWorkorder;
import com.techsoft.entity.common.ConfigDictionary;
import com.techsoft.entity.common.FirmPartner;
import com.techsoft.entity.common.ProductMaterial;
import com.techsoft.entity.common.StructProductionline;
import com.techsoft.entity.struct.StructProductionlineParamVo;

@Controller
@RequestMapping("/bill/billWarehousePick")
public class BillWarehousePickController extends BaseController {
	@Autowired
	private ClientBillWarehouseService clientBillWarehouseService;
	@Autowired
	private ClientProductMaterialService clientProductMaterialService ;
	@Autowired
	private ClientBillWorkorderService clientBillWorkorderService;
	@Autowired
	private ClientBillSaleorderItemService clientBillSaleorderItemService;
	@Autowired
	private ClientConfigDictionaryService clientConfigDictionaryService;
	@Autowired
	private ClientStructProductionlineService clientStructProductionlineService;

	/**
	 * 页面关联数据初始化
	 * 
	 * @param modelAndView
	 */
	public void initData(ModelAndView modelAndView) {
		try {
			//取单据状态集合
			List<ConfigDictionary>billStatusDictIdList = clientConfigDictionaryService.selectListByParentId(EnumDictionary.BILL_STATUS.getValue());
			modelAndView.addObject("billStatusDictIdList", billStatusDictIdList);
			//取产线集合
			StructProductionlineParamVo structProductionlineParamVo = new StructProductionlineParamVo();
			List<StructProductionline> structProductionlinList = clientStructProductionlineService.selectListByParamVo(structProductionlineParamVo, this.getCommonParam(null));
			modelAndView.addObject("structProductionlinList", structProductionlinList);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		modelAndView.addObject("mapYesOrNo", MapYesOrNo.getMap());
		modelAndView.addObject("mapUserStatus", MapUserStatus.getMap());
	}

	/**
	*@auther:Wang
	*@version:2019年5月28日下午3:59:13
	*@param:
	*@description 生产领料单页面跳转
	*/
	@RequestMapping("/list")
	public ModelAndView list(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("bill/billWarehousePick-list");
		return modelAndView;
	}

	/**
	*@auther:Wang
	*@version:2019年5月28日下午3:59:33
	*@param:
	*@description 非生产领料单页面跳转
	*/
	@RequestMapping("/unPicklist")
	public ModelAndView unPicklist(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("bill/billWarehouseUnPick-list");
		return modelAndView;
	}
	
	/**
	*@auther:Wang
	*@version:2019年6月24日上午11:47:21
	*@param:
	*@description 销售出库单页面跳转
	*/
	@RequestMapping("/shippinglist")
	public ModelAndView shippinglist(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("bill/billWarehouseShipping-list");
		return modelAndView;
	}

	@RequestMapping("/details")
	public ModelAndView details(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("bill/billWarehousePick-details");
		return modelAndView;
	}

	/**
	*@auther:Wang
	*@version:2019年5月28日下午4:08:02
	*@param:
	*@description 选择工单页面跳转
	*/
	@RequestMapping("/choiceWorkOrder")
	public ModelAndView choiceWorkOrder(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("bill/billWarehousePick-choiceWorkOrder");
		return modelAndView;
	}

	/**
	*@auther:Wang
	*@version:2019年5月28日下午4:08:22
	*@param:
	*@description 选择物料页面跳转
	*/
	@RequestMapping("/choiceMatreial")
	public ModelAndView choiceMatreial(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("bill/billWarehouseUnPick-choiceMatreial");
		return modelAndView;
	}
	
	/**
	*@auther:Wang
	*@version:2019年6月24日上午11:46:57
	*@param:
	*@description 选择销售单跳转
	*/
	@RequestMapping("/choiceShip")
	public ModelAndView choiceShip(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		//销售单状态数据字典
		List<ConfigDictionary> saleorderStatusList;
		try {
			saleorderStatusList = clientConfigDictionaryService.selectListByParentId(EnumDictionary.BILL_STATUS.getValue());
			modelAndView.addObject("saleorderStatusList",saleorderStatusList);
			modelAndView.setViewName("bill/billWarehouseShipping-choiceShip");
			initData(modelAndView);
		} catch (BusinessException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return modelAndView;
	}

	/**
	*@auther:Wang
	*@version:2019年5月28日下午4:08:40
	*@param:billWorkorderBomParamVo 工单对象
	*@description 获得工单数据接口
	*/
	/*@ResponseBody
	@RequestMapping("/getWorkOrderBom/json")
	@SuppressWarnings("rawtypes")
	public ReturnPageInfo getWorkOrderBomJson(HttpServletRequest request,
			BillWorkorderBomParamVo billWorkorderBomParamVo, Integer pageIndex) {
		PageInfo pageInfo = null;
		try {
			if (billWorkorderBomParamVo == null) {
				billWorkorderBomParamVo = new BillWorkorderBomParamVo();
			}
			if (billWorkorderBomParamVo.getMaterialCode() !=null && billWorkorderBomParamVo.getMaterialCode() !="") {
				ProductMaterial material=clientProductMaterialService.getVoByCode(billWorkorderBomParamVo.getMaterialCode(), this.getCommonParam(request));
				if (material == null) {
					billWorkorderBomParamVo.setMaterialId(Long.parseLong(billWorkorderBomParamVo.getMaterialCode()));
				}else {
					billWorkorderBomParamVo.setMaterialId(material.getId());
				}
				
			}
			if (billWorkorderBomParamVo.getBillWorkorderName() !=null && billWorkorderBomParamVo.getBillWorkorderName() !="") {
				BillWorkorder billWorkorder=clientBillWorkorderService.getVoByCode(billWorkorderBomParamVo.getBillWorkorderName(), this.getCommonParam(request));
				if (billWorkorder == null) {
					billWorkorderBomParamVo.setBillWorkorderId(Long.parseLong(billWorkorderBomParamVo.getBillWorkorderName()));
				}else{
					billWorkorderBomParamVo.setBillWorkorderId(billWorkorder.getId());
				}
			}
			pageInfo = clientBillWorkorderBomService.selectPageVoByParamVo(billWorkorderBomParamVo,
					this.getCommonParam(request), pageIndex, Constants.SEARCH_PAGE_SIZE);
		} catch (BusinessException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}*/
	
	/**
	*@auther:Wang
	*@version:2019年6月24日上午11:47:53
	*@param:
	*@description 获得销售单数据接口
	*/
	@ResponseBody
	@RequestMapping("/getBillSale/json")
	@SuppressWarnings("rawtypes")	
	public ReturnPageInfo  getBillSaletJson(HttpServletRequest request,
			BillSaleorderItemParamVo billSaleorderItemParamVo, Integer pageIndex) {
		PageInfo pageInfo = null;
		try {
            if(billSaleorderItemParamVo==null){
            	billSaleorderItemParamVo = new BillSaleorderItemParamVo();
            }
			pageInfo = clientBillSaleorderItemService.selectPageVoByParamVo(
					billSaleorderItemParamVo, this.getCommonParam(request),
					pageIndex, Constants.SEARCH_PAGE_SIZE);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}

	@RequestMapping("/edit")
	public ModelAndView edit(HttpServletRequest request, Long id) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("bill/billWarehouse-edit");
		BillWarehouseVo entity = new BillWarehouseVo();
		try {
			if (id != null) {
				entity = clientBillWarehouseService.getVoByID(id, this.getCommonParam(request));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		modelAndView.addObject("entity", entity);
		initData(modelAndView);
		return modelAndView;
	}

	@ResponseBody
	@RequestMapping("/list/json")
	@SuppressWarnings("rawtypes")
	public ReturnPageInfo listJson(HttpServletRequest request, BillWarehouseParamVo billWarehouseParamVo,
			Integer pageIndex, Integer pageSize) {
		PageInfo pageInfo = null;
		Integer pageNumber = 0;
		if (pageSize != null) {
			pageNumber = pageSize;
		} else {
			pageNumber = Constants.SEARCH_PAGE_SIZE;
		}		
		try {
			if (billWarehouseParamVo == null) {
				billWarehouseParamVo = new BillWarehouseParamVo();
			}
			pageInfo = clientBillWarehouseService.selectPageVoByParamVo(billWarehouseParamVo,
					this.getCommonParam(request), pageIndex, pageNumber);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage save(HttpServletRequest request, BillWarehouseParamVo billWarehouseParamVo) {
		ResultMessage resultMessage = new ResultMessage();
		billWarehouseParamVo.setModifyUserId(getLoginUserId(request));
		resultMessage = clientBillWarehouseService.saveOrUpdate(billWarehouseParamVo, this.getCommonParam(request));

		return resultMessage;
	}

	/**
	*@auther:Wang
	*@version:2019年5月28日下午4:09:12
	*@param:billWarehouseVo 领料单主表对象
	*@description 生产领料单保存接口
	*/
	/*@RequestMapping(value = "/pickBatchSave", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage batchSave(HttpServletRequest request, BillWarehouseVo billWarehouseVo,
			BillWorkorder billWorkorder) {
		ResultMessage resultMessage = new ResultMessage();

		String item = request.getParameter("array");
		List<BillWorkorderBomVo> list = JsonUtils.conversionToList(item, BillWorkorderBomVo.class);
		billWarehouseVo.setId(null);
		billWarehouseVo.setModifyUserId(getLoginUserId(request));
		billWarehouseVo.setBillStatusDictId(EnumDictBillStatus.NEW.getValue());
		billWarehouseVo.setBillTypeDictId(EnumDictBillType.BILL_TYPE_WAREHOUSE_PICKING.getValue());

		resultMessage = clientBillWarehouseService.pickInsert(billWarehouseVo, list,
				this.getCommonParam(request));

		return resultMessage;
	}*/

	/**
	*@auther:Wang
	*@version:2019年5月28日下午4:09:46
	*@param:billWarehouseVo 领料单主表对象
	*@description 非生产领料单保存接口
	*/
	@RequestMapping(value = "/unPickBatchSave", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage unPickBatchSave(HttpServletRequest request, BillWarehouseVo billWarehouseVo) {
		ResultMessage resultMessage = new ResultMessage();

		String item = request.getParameter("array");
		List<ProductMaterial> list = JsonUtils.conversionToList(item, ProductMaterial.class);
		billWarehouseVo.setId(null);
		billWarehouseVo.setModifyUserId(getLoginUserId(request));
		billWarehouseVo.setBillStatusDictId(EnumBillStatus.NEW.getValue());
		billWarehouseVo.setBillTypeDictId(EnumBillType.BILL_TYPE_WAREHOUSE_UNPICKING.getValue());
		billWarehouseVo.setAuditStatusDictId(EnumAuditStatus.UNAUDITED.getValue());
		resultMessage = clientBillWarehouseService.unPickInsert(billWarehouseVo, list,
				this.getCommonParam(request));

		return resultMessage;
	}
	
	@RequestMapping(value = "/shipBatchSave", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage shipBatchSave(HttpServletRequest request, BillWarehouseVo billWarehouseVo) {
		ResultMessage resultMessage = new ResultMessage();

		String item = request.getParameter("array");
		List<BillSaleorderItem> list = JsonUtils.conversionToList(item, BillSaleorderItem.class);
		billWarehouseVo.setId(null);
		billWarehouseVo.setModifyUserId(getLoginUserId(request));
		billWarehouseVo.setBillStatusDictId(EnumBillStatus.NEW.getValue());
		billWarehouseVo.setBillTypeDictId(EnumBillType.BILL_TYPE_WAREHOUSE_SHIPPING.getValue());
		billWarehouseVo.setAuditStatusDictId(EnumAuditStatus.UNAUDITED.getValue());
		resultMessage = clientBillWarehouseService.shipInsert(billWarehouseVo, list,
				this.getCommonParam(request));
		return resultMessage;
	}
	
	@RequestMapping("/lookOver")
	public ModelAndView lookOver(HttpServletRequest request, Long id) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("bill/billWarehouseUnPick-lookover");
		BillWarehouseVo entity = new BillWarehouseVo();
		try {
			if (id != null) {
				entity = clientBillWarehouseService.getVoByID(id, this.getCommonParam(request));
			}
			modelAndView.addObject("entity", entity);
			initData(modelAndView);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return modelAndView;
	}

	@RequestMapping("/audit")
	public ModelAndView audit(HttpServletRequest request, Long id) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("bill/billWarehouseUnPick-audit");
		BillWarehouseVo entity = new BillWarehouseVo();
		try {
			if (id != null) {
				entity = clientBillWarehouseService.getVoByID(id, this.getCommonParam(request));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		modelAndView.addObject("entity", entity);
		initData(modelAndView);
		return modelAndView;
	}
	
	@RequestMapping(value = "/auditSave", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage auditSave(HttpServletRequest request,
			BillWarehouseParamVo billWarehouseParamVo) {
		ResultMessage resultMessage = new ResultMessage();
	 
	    billWarehouseParamVo.setModifyUserId(getLoginUserId(request)); 
	    billWarehouseParamVo.setBillTypeDictId(EnumBillType.BILL_TYPE_WAREHOUSE_UNPICKING.getValue());
		resultMessage = clientBillWarehouseService.saveOrUpdate(billWarehouseParamVo,
				this.getCommonParam(request));

		return resultMessage;
	}
}
