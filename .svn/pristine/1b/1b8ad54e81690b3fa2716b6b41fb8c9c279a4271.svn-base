package com.techsoft.service.work;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.dubbo.config.annotation.Service;
import com.techsoft.common.BaseDao;
import com.techsoft.common.BaseServiceImpl;
import com.techsoft.common.BusinessException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.SQLException;
import com.techsoft.common.enums.EnumWorkTaskStatus;
import com.techsoft.common.enums.EnumYesOrNo;
import com.techsoft.dao.work.WorkTaskProcedureDao;
import com.techsoft.entity.common.WorkTaskProcedure;
import com.techsoft.entity.work.WorkTaskProcedureParamVo;

@Service
public class WorkTaskProcedureServiceImpl extends BaseServiceImpl<WorkTaskProcedure> implements WorkTaskProcedureService {
	@Autowired
	private WorkTaskProcedureDao workTaskProcedureDao;
	
	@Override
	public BaseDao<WorkTaskProcedure> getBaseDao() {
		return workTaskProcedureDao;
	}	
	
	@Override
	public Class<WorkTaskProcedure> getEntityClass() {
		return WorkTaskProcedure.class;
	}
	
	@Override
	protected WorkTaskProcedure insertEntity(WorkTaskProcedure entity, CommonParam commonParam) throws BusinessException, SQLException {
		return super.insertEntity(entity, commonParam);
	}

	@Override
	protected WorkTaskProcedure updatePartEntity(WorkTaskProcedure entity, CommonParam commonParam) throws BusinessException, SQLException {
		return super.updatePartEntity(entity, commonParam);
	}

	@Override
	protected WorkTaskProcedure updateEntity(WorkTaskProcedure entity, CommonParam commonParam) throws BusinessException, SQLException {
		return super.updateEntity(entity, commonParam);
	}

	@Override
	public List<WorkTaskProcedure> selectListCanWorking(WorkTaskProcedureParamVo workTaskProcedureParamVo,
			CommonParam commonParam) throws BusinessException, SQLException {
		if(workTaskProcedureParamVo==null){
			workTaskProcedureParamVo = new WorkTaskProcedureParamVo();
			workTaskProcedureParamVo.setTenantId(commonParam.getTenantId());
		}
		List<WorkTaskProcedure> list = new ArrayList<WorkTaskProcedure>();
		workTaskProcedureParamVo.setIsLocked(EnumYesOrNo.NO.getValue());// 未锁定的，
		workTaskProcedureParamVo.setTaskStatusDictId(EnumWorkTaskStatus.NOTSTARTED.getValue());// 未开始
		List<WorkTaskProcedure> list1 = workTaskProcedureDao.selectListByParamVo(workTaskProcedureParamVo);
		if ((list1 != null) && (!list1.isEmpty())) {
			list.addAll(list1);
		}
		
		workTaskProcedureParamVo.setTaskStatusDictId(EnumWorkTaskStatus.DOING.getValue());// 进行中的
		List<WorkTaskProcedure> list2 = workTaskProcedureDao.selectListByParamVo(workTaskProcedureParamVo);
		if ((list2 != null) && (!list2.isEmpty())) {
			list.addAll(list2);
		}
		return list;
	}					
}
