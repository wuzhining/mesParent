package com.techsoft.controller.equip;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageInfo;
import com.techsoft.client.service.config.ClientConfigDictionaryService;
import com.techsoft.client.service.equip.ClientEquipClassesWorkService;
import com.techsoft.client.service.equip.ClientEquipWorkService;
import com.techsoft.client.service.struct.ClientStructFactoryService;
import com.techsoft.client.service.struct.ClientStructProductionlineService;
import com.techsoft.client.service.struct.ClientStructWorkshopAreaService;
import com.techsoft.client.service.struct.ClientStructWorkshopService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.constants.Constants;
import com.techsoft.common.enums.EnumDictionary;
import com.techsoft.common.maps.MapYesOrNo;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.persistence.ReturnPageInfo;
import com.techsoft.controller.BaseController;
import com.techsoft.entity.common.ConfigDictionary;
import com.techsoft.entity.common.EquipClassesWork;
import com.techsoft.entity.common.EquipWorkClasses;
import com.techsoft.entity.common.StructFactory;
import com.techsoft.entity.common.StructProductionline;
import com.techsoft.entity.common.StructWorkshop;
import com.techsoft.entity.common.StructWorkshopArea;
import com.techsoft.entity.equip.EquipClassesWorkParamVo;
import com.techsoft.entity.equip.EquipWorkClassesParamVo;
import com.techsoft.entity.equip.EquipWorkParamVo;
import com.techsoft.entity.equip.EquipWorkVo;
import com.techsoft.entity.struct.StructFactoryParamVo;
import com.techsoft.entity.struct.StructProductionlineParamVo;
import com.techsoft.entity.struct.StructWorkshopAreaParamVo;
import com.techsoft.entity.struct.StructWorkshopParamVo;

@Controller
@RequestMapping("/equip/equipWork")
public class EquipWorkController extends BaseController {
	@Autowired
	private ClientEquipWorkService clientEquipWorkService;
	@Autowired
	private ClientStructFactoryService clientStructFactoryService;
	@Autowired
	private ClientConfigDictionaryService clientConfigDictionaryService;
	@Autowired
	private ClientStructProductionlineService clientStructProductionlineService;
	@Autowired
	private ClientStructWorkshopAreaService clientStructWorkshopAreaService;
	@Autowired
	private ClientEquipClassesWorkService clientEquipClassesWorkService;
	@Autowired
	private ClientStructWorkshopService clientStructWorkshopService;
	
	/**
	 * 页面关联数据初始化
	 * @param modelAndView
	 */
	public void initData(ModelAndView modelAndView) { 
		try {
			
			StructFactoryParamVo paramVo = new StructFactoryParamVo();
			List<StructFactory> factoryList = clientStructFactoryService.selectListByParamVo(paramVo,
					this.getCommonParam(null));
			modelAndView.addObject("factoryList1", factoryList);
			
			StructProductionlineParamVo SPParamVo = new StructProductionlineParamVo();
			List<StructProductionline> ProducList = clientStructProductionlineService
					.selectListByParamVo(SPParamVo, this.getCommonParam(null));
			modelAndView.addObject("ProducList1", ProducList);
			
			StructWorkshopAreaParamVo SWAParamVo = new StructWorkshopAreaParamVo();
			List<StructWorkshopArea> areaList = clientStructWorkshopAreaService
					.selectListByParamVo(SWAParamVo, this.getCommonParam(null));
			modelAndView.addObject("areaList1", areaList);
			
			EquipClassesWorkParamVo EWparamVo = new EquipClassesWorkParamVo();
			List<EquipClassesWork> EquipWorkList = clientEquipClassesWorkService.selectListByParamVo(EWparamVo,
					this.getCommonParam(null));
			modelAndView.addObject("configDictionaryType1", EquipWorkList);
			
			List<ConfigDictionary> configDictionaryStatus = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.FIXTURE_STATUS.getValue());
			modelAndView.addObject("configDictionaryStatus1", configDictionaryStatus);
			//取车间集合
			List<StructWorkshop> structWorkshopList = clientStructWorkshopService.selectListByParamVo(new StructWorkshopParamVo(),this.getCommonParam(null));
			modelAndView.addObject("structWorkshopList", structWorkshopList);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		modelAndView.addObject("mapYesOrNo", MapYesOrNo.getMap());
	}
	
	
	@RequestMapping("/list")
	public ModelAndView list(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("equip/equipWork-list");
		return modelAndView;
	}
	

	@RequestMapping("/edit")
	public ModelAndView edit(HttpServletRequest request, Long id) {
		ModelAndView modelAndView = new ModelAndView();
		try {
			
			StructFactoryParamVo paramVo = new StructFactoryParamVo();
			List<StructFactory> factoryList = clientStructFactoryService.selectListByParamVo(paramVo,
					this.getCommonParam(null));
			modelAndView.addObject("factoryList", factoryList);
			
			EquipClassesWorkParamVo EWparamVo = new EquipClassesWorkParamVo();
			List<EquipClassesWork> EquipWorkList = clientEquipClassesWorkService.selectListByParamVo(EWparamVo,this.getCommonParam(null));
			modelAndView.addObject("configDictionaryType", EquipWorkList);
			
			List<ConfigDictionary> configDictionaryStatus = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.FIXTURE_STATUS.getValue());
			modelAndView.addObject("configDictionaryStatus", configDictionaryStatus);
			
			EquipWorkVo entity = new EquipWorkVo();
			if (id != null) {
				entity = clientEquipWorkService.getVoByID(id, this.getCommonParam(request));

				//获取工厂
				if(entity.getFactoryId()!=null && entity.getFactoryId() > 0L ){
					StructFactory structFactory = clientStructFactoryService.getVoByID(entity.getFactoryId(), this.getCommonParam(request));
					modelAndView.addObject("structFactory", structFactory);
				}
				//获取车间
				if(entity.getWorkshopId()!=null && entity.getWorkshopId() > 0L ){
					StructWorkshop structWorkshop = clientStructWorkshopService.getVoByID(entity.getWorkshopId(), this.getCommonParam(request));
					modelAndView.addObject("structWorkshop", structWorkshop);
				}
				//获取车间区域
				if(entity.getWorkshopAreaId()!=null && entity.getWorkshopAreaId() > 0L){
					StructWorkshopArea structWorkshopArea = clientStructWorkshopAreaService.getVoByID(entity.getWorkshopAreaId(), this.getCommonParam(request));
					modelAndView.addObject("structWorkshopArea", structWorkshopArea);
				}
			}
			modelAndView.addObject("entity", entity);
			modelAndView.setViewName("equip/equipWork-edit");
			initData(modelAndView);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return modelAndView;
	}

	@ResponseBody
	@RequestMapping("/list/json")
	@SuppressWarnings("rawtypes")	
	public ReturnPageInfo listJson(HttpServletRequest request,
			EquipWorkParamVo equipWorkParamVo, Integer pageIndex, Integer pageSize) {
		PageInfo pageInfo = null;
		Integer pageNumber = 0;
		if (pageSize != null) {
			pageNumber = pageSize;
		} else {
			pageNumber = Constants.SEARCH_PAGE_SIZE;
		}		
		try {
            if(equipWorkParamVo==null){
            	equipWorkParamVo = new EquipWorkParamVo();
            }
			pageInfo = clientEquipWorkService.selectPageVoByParamVo(
					equipWorkParamVo, this.getCommonParam(request),
					pageIndex, pageNumber);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage save(HttpServletRequest request,
			EquipWorkParamVo equipWorkParamVo) {
		ResultMessage resultMessage = new ResultMessage();
	 
	    equipWorkParamVo.setModifyUserId(getLoginUserId(request)); 
		resultMessage = clientEquipWorkService.saveOrUpdate(equipWorkParamVo,
				this.getCommonParam(request));

		return resultMessage;
	}
	
	
	@RequestMapping("/equipWorkOpen")
	public ModelAndView equipWorkOpen(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("equip/equipWork-Open");
		return modelAndView;
	}
}
