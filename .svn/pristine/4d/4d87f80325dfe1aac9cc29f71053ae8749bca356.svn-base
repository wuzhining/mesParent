package com.techsoft.client.service.equip;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageInfo;
import com.techsoft.common.BaseClientServiceImpl;
import com.techsoft.common.BaseService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.utils.BeanUtil;

import com.techsoft.entity.common.EquipWorkStackProduct;
import com.techsoft.entity.equip.EquipWorkStackProductVo;
import com.techsoft.entity.equip.EquipWorkStackProductParamVo;
import com.techsoft.service.equip.EquipWorkStackProductService;

@org.springframework.stereotype.Service
public class ClientEquipWorkStackProductServiceImpl extends BaseClientServiceImpl<EquipWorkStackProduct> implements ClientEquipWorkStackProductService {
	@com.alibaba.dubbo.config.annotation.Reference
	private EquipWorkStackProductService equipWorkStackProductService;
    
	@Override
	public BaseService<EquipWorkStackProduct> getBaseService() {
		return equipWorkStackProductService;
	}	    	
    
	private EquipWorkStackProductVo getVo(EquipWorkStackProduct equipWorkStackProduct, CommonParam commonParam) throws BusinessException, SQLException {
		EquipWorkStackProductVo vo = new EquipWorkStackProductVo(equipWorkStackProduct);
		// TODO 此处填充其它关联字段的处理代码
		return vo;
	} 
	
	private EquipWorkStackProductVo getExtendVo(EquipWorkStackProduct equipWorkStackProduct, CommonParam commonParam) throws BusinessException, SQLException {
		EquipWorkStackProductVo vo = this.getVo(equipWorkStackProduct, commonParam);
		// TODO 此处填充其它关联字段的处理代码
		return vo;
	} 
		
	private List<EquipWorkStackProductVo> getVoList(List<EquipWorkStackProduct> list, CommonParam commonParam) throws BusinessException, SQLException {
		List<EquipWorkStackProductVo> voList = new ArrayList<EquipWorkStackProductVo>();
		for (EquipWorkStackProduct entity : list) {
			voList.add(this.getVo(entity, commonParam));
		}
		
		return voList;
	}	
	
	private List<EquipWorkStackProductVo> getExtendVoList(List<EquipWorkStackProduct> list, CommonParam commonParam) throws BusinessException, SQLException {
		List<EquipWorkStackProductVo> voList = new ArrayList<EquipWorkStackProductVo>();
		for (EquipWorkStackProduct entity : list) {
			voList.add(this.getExtendVo(entity, commonParam));
		}
		
		return voList;
	}	
	
	public EquipWorkStackProductVo getVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		EquipWorkStackProduct entity = this.getBaseService().selectById(id, commonParam);
		
		return this.getVo(entity, commonParam);
	}
	
	public List<EquipWorkStackProductVo>  selectListVoByParamVo(EquipWorkStackProductParamVo equipWorkStackProduct, CommonParam commonParam) throws BusinessException, SQLException {
		if(equipWorkStackProduct==null){
			equipWorkStackProduct = new EquipWorkStackProductParamVo();
		}
		equipWorkStackProduct.setTenantId(commonParam.getTenantId());	
	
		List<EquipWorkStackProduct> list = (List<EquipWorkStackProduct>) this.getBaseService().selectListByParamVo(equipWorkStackProduct, commonParam);
		
		return getVoList(list, commonParam);
	}
	
	@SuppressWarnings({"unchecked", "rawtypes" })
	public PageInfo<EquipWorkStackProductVo> selectPageVoByParamVo(EquipWorkStackProductParamVo equipWorkStackProduct, CommonParam commonParam, int pageNo, int pageSize) 
			throws BusinessException, SQLException {
		if(equipWorkStackProduct==null){
			equipWorkStackProduct = new EquipWorkStackProductParamVo();
		}
		equipWorkStackProduct.setTenantId(commonParam.getTenantId());	
					
		PageInfo<EquipWorkStackProduct> list  = (PageInfo<EquipWorkStackProduct>) this.getBaseService().selectPageByParamVo(equipWorkStackProduct, commonParam, pageNo, pageSize);
		List<EquipWorkStackProductVo> volist = new ArrayList<EquipWorkStackProductVo>();
		
		Iterator<EquipWorkStackProduct> iter = list.getList().iterator();
		EquipWorkStackProductVo vo = null;
		while (iter.hasNext()) {
			vo = this.getVo(iter.next(), commonParam);
			volist.add(vo);
		}
		
		Page<EquipWorkStackProductVo> vpage = new Page<EquipWorkStackProductVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());
		
		return new PageInfo(vpage);
	}	
	
	public EquipWorkStackProductVo getExtendVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		EquipWorkStackProduct entity = this.getBaseService().selectById(id, commonParam);
		
		return this.getExtendVo(entity, commonParam);
	}
	
	public List<EquipWorkStackProductVo>  selectListExtendVoByParamVo(EquipWorkStackProductParamVo equipWorkStackProduct, CommonParam commonParam) 
			throws BusinessException, SQLException {
		if(equipWorkStackProduct==null){
			equipWorkStackProduct = new EquipWorkStackProductParamVo();
		}
		equipWorkStackProduct.setTenantId(commonParam.getTenantId());	
					
		List<EquipWorkStackProduct> list = (List<EquipWorkStackProduct>) this.getBaseService().selectListByParamVo(equipWorkStackProduct, commonParam);
		
		return this.getExtendVoList(list, commonParam);
	}
	
	@SuppressWarnings({"unchecked", "rawtypes" })
	public PageInfo<EquipWorkStackProductVo> selectPageExtendVoByParamVo(EquipWorkStackProductParamVo equipWorkStackProduct, CommonParam commonParam, int pageNo, int pageSize) 
			throws BusinessException, SQLException {
		if(equipWorkStackProduct==null){
			equipWorkStackProduct = new EquipWorkStackProductParamVo();
		}
		equipWorkStackProduct.setTenantId(commonParam.getTenantId());	
					
		PageInfo<EquipWorkStackProduct> list  = (PageInfo<EquipWorkStackProduct>) this.getBaseService().selectPageByParamVo(equipWorkStackProduct, commonParam, pageNo, pageSize);
		List<EquipWorkStackProductVo> volist = new ArrayList<EquipWorkStackProductVo>();
		
		Iterator<EquipWorkStackProduct> iter = list.getList().iterator();
		EquipWorkStackProductVo vo = null;
		while (iter.hasNext()) {
			vo = this.getExtendVo(iter.next(), commonParam);
			volist.add(vo);
		}
		
		Page<EquipWorkStackProductVo> vpage = new Page<EquipWorkStackProductVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());
		
		return new PageInfo(vpage);
	}	
	
	public ResultMessage saveOrUpdate(EquipWorkStackProductParamVo equipWorkStackProductParamVo, CommonParam commonParam) { 
		ResultMessage resultMessage = new ResultMessage(); 
		EquipWorkStackProduct equipWorkStackProduct = null;
		try {
			if (equipWorkStackProductParamVo.getId() == null) {//新增
			 
				equipWorkStackProductParamVo.setTenantId(commonParam.getTenantId());
				equipWorkStackProduct = equipWorkStackProductService.saveOrUpdate(equipWorkStackProductParamVo,
						commonParam);
				resultMessage.setIsSuccess(true);
			} else {  //修改
				EquipWorkStackProduct equipWorkStackProductVoTemp = this.selectById(equipWorkStackProductParamVo
						.getId(), commonParam);

				BeanUtil.copyNotNullProperties(equipWorkStackProductVoTemp,
						equipWorkStackProductParamVo);
  
				equipWorkStackProduct = equipWorkStackProductService.saveOrUpdate(
						equipWorkStackProductVoTemp, commonParam); 
  
				resultMessage.setIsSuccess(true);
			}
			
			resultMessage.setBaseEntity(equipWorkStackProduct);
		} catch (BusinessException e) {
			resultMessage.addErr(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return resultMessage;
	}	
}
