package com.techsoft.controller.product;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageInfo;
import com.techsoft.client.service.config.ClientConfigDictionaryService;
import com.techsoft.client.service.firm.ClientFirmPartnerService;
import com.techsoft.client.service.product.ClientProductClassesService;
import com.techsoft.client.service.product.ClientProductMainService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.constants.Constants;
import com.techsoft.common.enums.EnumDictionary;
import com.techsoft.common.maps.MapUserStatus;
import com.techsoft.common.maps.MapYesOrNo;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.persistence.ReturnPageInfo;
import com.techsoft.controller.BaseController;
import com.techsoft.entity.common.ConfigDictionary;
import com.techsoft.entity.common.FirmPartner;
import com.techsoft.entity.common.ProductClasses;
import com.techsoft.entity.common.ProductMain;
import com.techsoft.entity.firm.FirmPartnerParamVo;
import com.techsoft.entity.product.ProductClassesParamVo;
import com.techsoft.entity.product.ProductMainParamVo;
import com.techsoft.entity.product.ProductMainVo;

@Controller
@RequestMapping("/product/productMain")
public class ProductMainController extends BaseController {
	@Autowired
	private ClientProductMainService clientProductMainService;
	@Autowired
	private ClientProductClassesService clientProductClassesService;
	@Autowired
	private ClientConfigDictionaryService clientConfigDictionaryService;
	@Autowired
	private ClientFirmPartnerService clientFirmPartnerService;
	/*@Autowired
	private ConfigDictionaryService configDictionaryService;*/
	/**
	 * 页面关联数据初始化
	 * @param modelAndView
	 */
	public void initData(ModelAndView modelAndView) { 
		 
		try {
		ProductClassesParamVo ParamVoClasee = new ProductClassesParamVo();
		//产品分类集合
		List<ProductClasses> classesList = clientProductClassesService.selectListByParamVo(ParamVoClasee,this.getCommonParam(null));
		modelAndView.addObject("classesList", classesList);
		//取供应商公司集合
		FirmPartnerParamVo firmPartnerParamVo = new FirmPartnerParamVo();
		List<FirmPartner> firmPartnerList = clientFirmPartnerService.selectListByParamVo(firmPartnerParamVo, this.getCommonParam(null));
		modelAndView.addObject("firmPartnerList", firmPartnerList);
		//产品类型数据字典
		List<ConfigDictionary> productTypeList = clientConfigDictionaryService
				.selectListByParentId(EnumDictionary.PRODUCT_TYPE.getValue());
		//产品状态数据字典
		List<ConfigDictionary> productStatusList = clientConfigDictionaryService
				.selectListByParentId(EnumDictionary.PRODUCT_STATUS.getValue());
		//产品来源数据字典
		List<ConfigDictionary> productSourceList = clientConfigDictionaryService
				.selectListByParentId(EnumDictionary.PRODUCT_SOURCE.getValue());
		//检验方式数据字典
		List<ConfigDictionary> qualityVerifyModeList = clientConfigDictionaryService
				.selectListByParentId(EnumDictionary.QUALITY_INSPECT_MODE.getValue());
		
		modelAndView.addObject("productTypeList", productTypeList);
		modelAndView.addObject("productSourceList", productSourceList);
		modelAndView.addObject("productStatusList", productStatusList);
		modelAndView.addObject("qualityVerifyModeList", qualityVerifyModeList);
		} catch (BusinessException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		modelAndView.addObject("mapYesOrNo", MapYesOrNo.getMap());  
		modelAndView.addObject("mapUserStatus", MapUserStatus.getMap()); 
	}
	
	
	@RequestMapping("/list")
	public ModelAndView list(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("product/productMain-list");
		return modelAndView;
	}
	
	@RequestMapping("/productMainOpen")
	public ModelAndView openWinProduct(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("product/productMainOpen");
		return modelAndView;
	}
	

	@RequestMapping("/edit")
	public ModelAndView edit(HttpServletRequest request, Long id) {
		ModelAndView modelAndView = new ModelAndView();
		List<Map<String,String>> skuNameList=new ArrayList<>();
		
		try {
			ProductMainVo entity = new ProductMainVo();
			if (id != null) {
				entity = clientProductMainService.getVoByID(id, this.getCommonParam(request));
			}
			if(id!=null){
				ProductMain productMain=clientProductMainService.selectById(id,  this.getCommonParam(null));
				String skuName="";
				if(productMain!=null){
						skuName=productMain.getSkuName();
				}
				if(skuName!=""&&skuName!=null){
					String[] skuNames = skuName.split(",");
					if (skuNames.length>0){
						for (String name : skuNames) {
							Map<String,String> map=new HashMap<>();
							map.put("skuName", name);
							skuNameList.add(map);
						}
					}
					
				}
			}
			if(skuNameList.size()==0){
				Map<String,String> map=new HashMap<>();
				map.put("skuName", "");
				skuNameList.add(map);
			}
			modelAndView.addObject("skuNameList", skuNameList);
			modelAndView.addObject("entity", entity);
			modelAndView.setViewName("product/productMain-edit");
			initData(modelAndView);
		} catch (BusinessException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return modelAndView;
	}

	@ResponseBody
	@RequestMapping("/list/json")
	@SuppressWarnings("rawtypes")	
	public ReturnPageInfo listJson(HttpServletRequest request,
			ProductMainParamVo productMainParamVo, Integer pageIndex, Integer pageSize) {
		PageInfo pageInfo = null;
		Integer pageNumber = 0;
		if (pageSize != null) {
			pageNumber = pageSize;
		} else {
			pageNumber = Constants.SEARCH_PAGE_SIZE;
		}			
		try {
            if(productMainParamVo==null){
            	productMainParamVo = new ProductMainParamVo();
            }
			pageInfo = clientProductMainService.selectPageVoByParamVo(
					productMainParamVo, this.getCommonParam(request),
					pageIndex, pageNumber);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage save(HttpServletRequest request,
			ProductMainParamVo productMainParamVo) {
		ResultMessage resultMessage = new ResultMessage();
	 
	    productMainParamVo.setModifyUserId(getLoginUserId(request)); 
		resultMessage = clientProductMainService.saveOrUpdate(productMainParamVo,
				this.getCommonParam(request));

		return resultMessage;
	}
	
	@RequestMapping("/shelfOpen")
	public ModelAndView openWinShelf(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("warehouse/warehouseShelfOpen");
		return modelAndView;
	}
	
	@RequestMapping("/upShelfOpen")
	public ModelAndView openWinUpShelf(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("warehouse/warehouseUpShelfOpen");
		return modelAndView;
	}


}
