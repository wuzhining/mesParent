package com.techsoft.controller.sys;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageInfo;
import com.spring.extend.MD5Util;
import com.techsoft.common.BusinessException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.constants.Constants;
import com.techsoft.common.maps.MapUserStatus;
import com.techsoft.common.maps.MapYesOrNo;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.persistence.ReturnPageInfo;
import com.techsoft.common.utils.Md5Token;
import com.techsoft.common.SQLException;
import com.techsoft.controller.BaseController;

import com.techsoft.client.service.sys.ClientUserPassportService;
import com.techsoft.entity.sys.UserPassportVo;
import com.techsoft.entity.sys.UserPassportParamVo;

@Controller
@RequestMapping("/sys/userPassport")
public class UserPassportController extends BaseController {
	@Autowired
	private ClientUserPassportService clientUserPassportService;
	
	/**
	 * 页面关联数据初始化
	 * @param modelAndView
	 */
	public void initData(ModelAndView modelAndView) { 
		
		modelAndView.addObject("mapYesOrNo", MapYesOrNo.getMap());  
		modelAndView.addObject("mapUserStatus", MapUserStatus.getMap());  
	}
	
	
	@RequestMapping("/list")
	public ModelAndView list(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("sys/userPassport-list");
		return modelAndView;
	}
	

	@RequestMapping("/edit")
	public ModelAndView edit(HttpServletRequest request, Long id) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("sys/userPassport-edit");
		UserPassportVo entity = new UserPassportVo();
		try {
			if (id != null) {
				entity = clientUserPassportService.getVoByID(id, this.getCommonParam(request));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		modelAndView.addObject("entity", entity);
		initData(modelAndView);
		return modelAndView;
	}

	@ResponseBody
	@RequestMapping("/list/json")
	@SuppressWarnings("rawtypes")	
	public ReturnPageInfo listJson(HttpServletRequest request,
			UserPassportParamVo userPassportParamVo, Integer pageIndex, Integer pageSize) {
		PageInfo pageInfo = null;
		Integer pageNumber = 0;
		if (pageSize != null) {
			pageNumber = pageSize;
		} else {
			pageNumber = Constants.SEARCH_PAGE_SIZE;
		}		
		try {
            if(userPassportParamVo==null){
            	userPassportParamVo = new UserPassportParamVo();
            }
			pageInfo = clientUserPassportService.selectPageVoByParamVo(
					userPassportParamVo, this.getCommonParam(request),
					pageIndex, pageNumber);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage save(HttpServletRequest request,
			UserPassportParamVo userPassportParamVo) {
		ResultMessage resultMessage = new ResultMessage();
	 
	    userPassportParamVo.setModifyUserId(getLoginUserId(request)); 
	    userPassportParamVo.setCreateUserId(getLoginUserId(request));
		resultMessage = clientUserPassportService.saveOrUpdate(userPassportParamVo,
				this.getCommonParam(request));

		return resultMessage;
	}
	
	
	@RequestMapping("/userlist")
	public ModelAndView userlist(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		//查询用户密码
		try {
			//得到当前用户id
			long id= getLoginUserId(request);
			UserPassportVo entity = clientUserPassportService.getVoByID(id, this.getCommonParam(request));
			System.out.println("密码:"+entity); 
			//这里要根据管理员权限查询到用户数据 然后  null为查询到用户信息的list集合
			
			modelAndView.addObject("user", entity);
			modelAndView.setViewName("sys/updatepassport-list");
		} catch (BusinessException | SQLException e) {
			e.printStackTrace();
		}
		
		return modelAndView;
	}
	

	@ResponseBody
	@RequestMapping("/userlist/json")
	@SuppressWarnings("rawtypes")	
	public ReturnPageInfo userlistJson(HttpServletRequest request,
			UserPassportParamVo userPassportParamVo, Integer pageIndex) {
		PageInfo pageInfo = null;
		try {
            if(userPassportParamVo==null){
            	userPassportParamVo = new UserPassportParamVo();
            }
			pageInfo = clientUserPassportService.selectPageVoByParamVo(
					userPassportParamVo, this.getCommonParam(request),
					pageIndex, Constants.SEARCH_PAGE_SIZE);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}
	
	
	
	@RequestMapping(value = "/usersave", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage usersave(HttpServletRequest request,UserPassportVo userPassportVo,String oldPassword,String newPassword) {
		System.out.println(newPassword.length());
		String password = request.getParameter("password");
		ResultMessage resultMessage = new ResultMessage();
	    userPassportVo.setCreateUserId(getLoginUserId(request));
		resultMessage = clientUserPassportService.modifiyUserPass(userPassportVo,oldPassword.trim(),
				newPassword.trim(), password.trim(),this.getCommonParam(request));
		return resultMessage;
	}
	
}
