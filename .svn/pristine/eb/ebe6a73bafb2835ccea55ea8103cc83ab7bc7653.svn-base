package com.techsoft.client.service.work;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageInfo;
import com.techsoft.common.BaseClientServiceImpl;
import com.techsoft.common.BaseService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.utils.BeanUtil;

import com.techsoft.entity.common.WorkPlanMaterial;
import com.techsoft.entity.work.WorkPlanMaterialVo;
import com.techsoft.entity.work.WorkPlanMaterialParamVo;
import com.techsoft.service.work.WorkPlanMaterialService;

@org.springframework.stereotype.Service
public class ClientWorkPlanMaterialServiceImpl extends BaseClientServiceImpl<WorkPlanMaterial> implements ClientWorkPlanMaterialService {
	@com.alibaba.dubbo.config.annotation.Reference
	private WorkPlanMaterialService workPlanMaterialService;
    
	@Override
	public BaseService<WorkPlanMaterial> getBaseService() {
		return workPlanMaterialService;
	}	    	
    
	private WorkPlanMaterialVo getVo(WorkPlanMaterial workPlanMaterial, CommonParam commonParam) throws BusinessException, SQLException {
		WorkPlanMaterialVo vo = new WorkPlanMaterialVo(workPlanMaterial);
		// TODO 此处填充其它关联字段的处理代码
		return vo;
	} 
	
	private WorkPlanMaterialVo getExtendVo(WorkPlanMaterial workPlanMaterial, CommonParam commonParam) throws BusinessException, SQLException {
		WorkPlanMaterialVo vo = this.getVo(workPlanMaterial, commonParam);
		// TODO 此处填充其它关联字段的处理代码
		return vo;
	} 
		
	private List<WorkPlanMaterialVo> getVoList(List<WorkPlanMaterial> list, CommonParam commonParam) throws BusinessException, SQLException {
		List<WorkPlanMaterialVo> voList = new ArrayList<WorkPlanMaterialVo>();
		for (WorkPlanMaterial entity : list) {
			voList.add(this.getVo(entity, commonParam));
		}
		
		return voList;
	}	
	
	private List<WorkPlanMaterialVo> getExtendVoList(List<WorkPlanMaterial> list, CommonParam commonParam) throws BusinessException, SQLException {
		List<WorkPlanMaterialVo> voList = new ArrayList<WorkPlanMaterialVo>();
		for (WorkPlanMaterial entity : list) {
			voList.add(this.getExtendVo(entity, commonParam));
		}
		
		return voList;
	}	
	
	public WorkPlanMaterialVo getVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		WorkPlanMaterial entity = this.getBaseService().selectById(id, commonParam);
		
		return this.getVo(entity, commonParam);
	}
	
	public List<WorkPlanMaterialVo>  selectListVoByParamVo(WorkPlanMaterialParamVo workPlanMaterial, CommonParam commonParam) throws BusinessException, SQLException {
		if(workPlanMaterial==null){
			workPlanMaterial = new WorkPlanMaterialParamVo();
		}
		workPlanMaterial.setTenantId(commonParam.getTenantId());	
	
		List<WorkPlanMaterial> list = (List<WorkPlanMaterial>) this.getBaseService().selectListByParamVo(workPlanMaterial, commonParam);
		
		return getVoList(list, commonParam);
	}
	
	@SuppressWarnings({"unchecked", "rawtypes" })
	public PageInfo<WorkPlanMaterialVo> selectPageVoByParamVo(WorkPlanMaterialParamVo workPlanMaterial, CommonParam commonParam, int pageNo, int pageSize) 
			throws BusinessException, SQLException {
		if(workPlanMaterial==null){
			workPlanMaterial = new WorkPlanMaterialParamVo();
		}
		workPlanMaterial.setTenantId(commonParam.getTenantId());	
					
		PageInfo<WorkPlanMaterial> list  = (PageInfo<WorkPlanMaterial>) this.getBaseService().selectPageByParamVo(workPlanMaterial, commonParam, pageNo, pageSize);
		List<WorkPlanMaterialVo> volist = new ArrayList<WorkPlanMaterialVo>();
		
		Iterator<WorkPlanMaterial> iter = list.getList().iterator();
		WorkPlanMaterialVo vo = null;
		while (iter.hasNext()) {
			vo = this.getVo(iter.next(), commonParam);
			volist.add(vo);
		}
		
		Page<WorkPlanMaterialVo> vpage = new Page<WorkPlanMaterialVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());
		
		return new PageInfo(vpage);
	}	
	
	public WorkPlanMaterialVo getExtendVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		WorkPlanMaterial entity = this.getBaseService().selectById(id, commonParam);
		
		return this.getExtendVo(entity, commonParam);
	}
	
	public List<WorkPlanMaterialVo>  selectListExtendVoByParamVo(WorkPlanMaterialParamVo workPlanMaterial, CommonParam commonParam) 
			throws BusinessException, SQLException {
		if(workPlanMaterial==null){
			workPlanMaterial = new WorkPlanMaterialParamVo();
		}
		workPlanMaterial.setTenantId(commonParam.getTenantId());	
					
		List<WorkPlanMaterial> list = (List<WorkPlanMaterial>) this.getBaseService().selectListByParamVo(workPlanMaterial, commonParam);
		
		return this.getExtendVoList(list, commonParam);
	}
	
	@SuppressWarnings({"unchecked", "rawtypes" })
	public PageInfo<WorkPlanMaterialVo> selectPageExtendVoByParamVo(WorkPlanMaterialParamVo workPlanMaterial, CommonParam commonParam, int pageNo, int pageSize) 
			throws BusinessException, SQLException {
		if(workPlanMaterial==null){
			workPlanMaterial = new WorkPlanMaterialParamVo();
		}
		workPlanMaterial.setTenantId(commonParam.getTenantId());	
					
		PageInfo<WorkPlanMaterial> list  = (PageInfo<WorkPlanMaterial>) this.getBaseService().selectPageByParamVo(workPlanMaterial, commonParam, pageNo, pageSize);
		List<WorkPlanMaterialVo> volist = new ArrayList<WorkPlanMaterialVo>();
		
		Iterator<WorkPlanMaterial> iter = list.getList().iterator();
		WorkPlanMaterialVo vo = null;
		while (iter.hasNext()) {
			vo = this.getExtendVo(iter.next(), commonParam);
			volist.add(vo);
		}
		
		Page<WorkPlanMaterialVo> vpage = new Page<WorkPlanMaterialVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());
		
		return new PageInfo(vpage);
	}	
	
	public ResultMessage saveOrUpdate(WorkPlanMaterialParamVo workPlanMaterialParamVo, CommonParam commonParam) { 
		ResultMessage resultMessage = new ResultMessage(); 
		WorkPlanMaterial workPlanMaterial = null;
		try {
			if (workPlanMaterialParamVo.getId() == null) {//新增
			 
				workPlanMaterialParamVo.setTenantId(commonParam.getTenantId());
				workPlanMaterial = workPlanMaterialService.saveOrUpdate(workPlanMaterialParamVo,
						commonParam);
				resultMessage.setIsSuccess(true);
			} else {  //修改
				WorkPlanMaterial workPlanMaterialVoTemp = this.selectById(workPlanMaterialParamVo
						.getId(), commonParam);

				BeanUtil.copyNotNullProperties(workPlanMaterialVoTemp,
						workPlanMaterialParamVo);
  
				workPlanMaterial = workPlanMaterialService.saveOrUpdate(
						workPlanMaterialVoTemp, commonParam); 
  
				resultMessage.setIsSuccess(true);
			}
			
			resultMessage.setBaseEntity(workPlanMaterial);
		} catch (BusinessException e) {
			resultMessage.addErr(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return resultMessage;
	}	
}
