package com.techsoft.controller.pda;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.techsoft.client.service.alarm.ClientAlarmInforFlowService;
import com.techsoft.client.service.alarm.ClientAlarmLevelService;
import com.techsoft.client.service.alarm.ClientAlarmProblemService;
import com.techsoft.client.service.config.ClientConfigDictionaryService;
import com.techsoft.client.service.equip.ClientEquipWorkService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.utils.JsonUtils;
import com.techsoft.controller.BaseController;
import com.techsoft.entity.alarm.AlarmInforFlowParamVo;
import com.techsoft.entity.alarm.AlarmInforFlowVo;
import com.techsoft.entity.alarm.AlarmLevelParamVo;
import com.techsoft.entity.alarm.AlarmProblemParamVo;
import com.techsoft.entity.common.AlarmInforFlow;
import com.techsoft.entity.common.AlarmLevel;
import com.techsoft.entity.common.AlarmProblem;
import com.techsoft.entity.common.ConfigDictionary;
import com.techsoft.entity.config.ConfigDictionaryParamVo;
import com.techsoft.entity.equip.EquipWorkParamVo;
import com.techsoft.entity.equip.EquipWorkVo;

/**
 *@auther :Yang
 *@version :2019年7月31日
 *@param
 *@return
 *@description PDA调用安灯信息Controller
 */
@Controller
@RequestMapping("/pda/pdaAlarmInforFlow")
public class PdaAlarmInforFlowController extends BaseController {
	@Autowired
	private ClientAlarmInforFlowService clientAlarmInforFlowService;
	@Autowired
	private ClientAlarmProblemService clientAlarmProblemService;
	@Autowired
	private ClientConfigDictionaryService clientConfigDictionaryService;
	@Autowired
	private ClientAlarmLevelService clientAlarmLevelService;
	@Autowired
	private ClientEquipWorkService clientEquipWorkService;

	/**
	 *@auther :Yang
	 *@version :2019年7月31日
	 *@param
	 *@return
	 *@description 选择或扫描机器设备
	 */
	@ResponseBody
	@RequestMapping("/getEquipCode")
	public ResultMessage getEquipCode(HttpServletRequest request, String equipCode) {
		ResultMessage resultMessage = new ResultMessage();
		List<EquipWorkVo> equipWorkCode = new ArrayList<EquipWorkVo>();
		EquipWorkParamVo paramVo = new EquipWorkParamVo();
		paramVo.setEquipCode(equipCode);
		try {
			equipWorkCode = clientEquipWorkService.selectListVoByParamVo(paramVo, this.getCommonParam(request));
			if (equipWorkCode.size() == 0) {
				resultMessage.setIsSuccess(false);
				resultMessage.addErr("无此机器设备信息");
			} else {
				resultMessage.put(equipWorkCode);
				resultMessage.setIsSuccess(true);
			}
		} catch (BusinessException e) {
			resultMessage.addErr("业务运行异常");
		} catch (SQLException e) {
			resultMessage.addErr("SQL查询异常");
		}

		return resultMessage;
	}
	
	/**
	 *@auther :Yang
	 *@version :2019年8月1日
	 *@param
	 *@return
	 *@description 获取报警等级
	 */
	@ResponseBody
	@RequestMapping("/getAlarmLevel")
	public ResultMessage getAlarmLevel(HttpServletRequest request) {
		ResultMessage resultMessage = new ResultMessage();
		try {
			List<AlarmLevel> alarmLevelList = clientAlarmLevelService.selectListByParamVo(new AlarmLevelParamVo(),this.getCommonParam(null));
			if (alarmLevelList.size() == 0) {
				resultMessage.setIsSuccess(false);
				resultMessage.addErr("报警等级无数据");
			} else {
				resultMessage.put(alarmLevelList);
				resultMessage.setIsSuccess(true);
			}
		} catch (SQLException e) {
			resultMessage.addErr("SQL查询异常");
		}

		return resultMessage;
	}
	
	
	/**
	 *@auther :Yang
	 *@version :2019年8月1日
	 *@param
	 *@return
	 *@description 获取报警问题
	 */
	@ResponseBody
	@RequestMapping("/getAlarmProblem")
	public ResultMessage getAlarmProblem(HttpServletRequest request) {
		ResultMessage resultMessage = new ResultMessage();
		try {
			List<AlarmProblem> alarmProblemList = clientAlarmProblemService.selectListByParamVo(new AlarmProblemParamVo(),this.getCommonParam(null));
			if (alarmProblemList.size() == 0) {
				resultMessage.setIsSuccess(false);
				resultMessage.addErr("报警问题无数据");
			} else {
				resultMessage.put(alarmProblemList);
				resultMessage.setIsSuccess(true);
			}
		} catch (SQLException e) {
			resultMessage.addErr("SQL查询异常");
		}

		return resultMessage;
	}
	
	
	/**
	 *@auther :Yang
	 *@version :2019年8月1日
	 *@param
	 *@return
	 *@description 获取报警状态
	 */
	@ResponseBody
	@RequestMapping("/getAlarmStatus")
	public ResultMessage getAlarmStatus(HttpServletRequest request) {
		ResultMessage resultMessage = new ResultMessage();
		try {
			ConfigDictionaryParamVo paramVo = new ConfigDictionaryParamVo();
			paramVo.setId(10448L);			
			List<ConfigDictionary> alarmstatusList = clientConfigDictionaryService.selectListByParamVo(paramVo,this.getCommonParam(null));
			if (alarmstatusList.size() == 0) {
				resultMessage.setIsSuccess(false);
				resultMessage.addErr("报警状态无数据");
			} else {
				resultMessage.put(alarmstatusList);
				resultMessage.setIsSuccess(true);
			}
		} catch (SQLException e) {
			resultMessage.addErr("SQL查询异常");
		}

		return resultMessage;
	}
	

	
	/**
	 *@auther :Yang
	 *@version :2019年8月1日
	 *@param
	 *@return
	 *@description 获取报警状态
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/addAlarmInforFlow", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage addAlarmInforFlow(HttpServletRequest request) {
		ResultMessage resultMessage = new ResultMessage();
		AlarmInforFlowParamVo af = new AlarmInforFlowParamVo();
		String item=request.getParameter("array");
		List<AlarmInforFlow> list = JsonUtils.conversionToList(item, AlarmInforFlow.class);
		System.err.println(list);
		for (AlarmInforFlow alarmInforFlow : list) {
			af.setEquipWorkId(alarmInforFlow.getEquipWorkId());
			af.setProblemId(alarmInforFlow.getProblemId());
			af.setAlarmLevelId(alarmInforFlow.getAlarmLevelId());
			af.setAlarmTypeDictId(alarmInforFlow.getAlarmTypeDictId());
			if(!"".equals(alarmInforFlow.getId())){
				af.setId(alarmInforFlow.getId());
			}
			if(!"".equals(alarmInforFlow.getStatusDictId())){
				af.setStatusDictId(alarmInforFlow.getStatusDictId());
			}
			if(!"".equals(alarmInforFlow.getDealResultDictId())){
				af.setDealResultDictId(alarmInforFlow.getDealResultDictId());
			}
			
			if(!"".equals(alarmInforFlow.getAlarmUserId())){
			    af.setAlarmUserId(alarmInforFlow.getAlarmUserId());
			}
			if(!"".equals(alarmInforFlow.getRespondUserId())){
			    af.setRespondUserId(alarmInforFlow.getRespondUserId());
			}
			if(!"".equals(alarmInforFlow.getDealUserId())){
			    af.setDealUserId(alarmInforFlow.getDealUserId());
			}
			if(!"".equals(alarmInforFlow.getConfirmUserId())){
			    af.setConfirmUserId(alarmInforFlow.getConfirmUserId());
			}
			if(!"".equals(alarmInforFlow.getAlarmTime())){
			    af.setAlarmTime(alarmInforFlow.getAlarmTime());
			}
			if(!"".equals(alarmInforFlow.getRespondTime())){
				af.setRespondTime(alarmInforFlow.getRespondTime());
			}
			
			if(!"".equals(alarmInforFlow.getConfirmTime())){
				af.setConfirmTime(alarmInforFlow.getConfirmTime());
			}
			
			if(!"".equals(alarmInforFlow.getDealTime())){
				af.setDealTime(alarmInforFlow.getDealTime());
			}
			
			if(!"".equals(alarmInforFlow.getRemark())){
				af.setRemark(alarmInforFlow.getRemark());
			}
			
		}
		af.setModifyUserId(getLoginUserId(request)); 
		resultMessage = clientAlarmInforFlowService.saveOrUpdate(af,this.getCommonParam(request));
		return resultMessage;
	}
	
	
	
	/**
	 *@auther :Yang
	 *@version :2019年8月1日
	 *@param
	 *@return
	 *@description 查询安灯信息
	 */
	@ResponseBody
	@RequestMapping("/alarmInforFlowList")
	public ResultMessage getalarmInforFlowList(HttpServletRequest request, String problemId, String equipWorkId,String alarmTypeDictId,String statusDictId ,String dealResultDictId) {
		ResultMessage resultMessage = new ResultMessage();
		List<AlarmInforFlowVo> aList = new ArrayList<AlarmInforFlowVo>();
		AlarmInforFlowParamVo paramVo = new AlarmInforFlowParamVo();
			if(!"".equals(problemId)){
				paramVo.setProblemId(Long.valueOf(problemId));
			}
			if(!"".equals(equipWorkId)){
				paramVo.setEquipWorkId(Long.valueOf(equipWorkId));
			}
			if(!"".equals(alarmTypeDictId)){
				paramVo.setAlarmTypeDictId(Long.valueOf(alarmTypeDictId));
			}
			
			if(!"".equals(statusDictId)){
				paramVo.setStatusDictId(Long.valueOf(statusDictId));
			}
			if(!"".equals(dealResultDictId)){
				paramVo.setDealResultDictId(Long.valueOf(dealResultDictId));
			}
		
		try {
			    aList = clientAlarmInforFlowService.selectListVoByParamVo(paramVo, this.getCommonParam(request));
			if (aList.size() <= 0) {
				resultMessage.setIsSuccess(false);
				resultMessage.addErr("查询安灯信息无数据");
			}else{
				resultMessage.put(aList);
				resultMessage.setIsSuccess(true);
			}
		} catch (BusinessException e) {
			resultMessage.addErr("业务运行异常");
		} catch (SQLException e) {
			resultMessage.addErr("SQL查询异常");
		}
		return resultMessage;
	}
	
	
}
