package com.techsoft.client.service.equip;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageInfo;
import com.techsoft.common.BaseClientServiceImpl;
import com.techsoft.common.BaseService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.utils.BeanUtil;

import com.techsoft.entity.common.EquipClassesWork;
import com.techsoft.entity.equip.EquipClassesWorkVo;
import com.techsoft.entity.equip.EquipClassesWorkParamVo;
import com.techsoft.service.equip.EquipClassesWorkService;

@org.springframework.stereotype.Service
public class ClientEquipClassesWorkServiceImpl extends BaseClientServiceImpl<EquipClassesWork> implements ClientEquipClassesWorkService {
	@com.alibaba.dubbo.config.annotation.Reference
	private EquipClassesWorkService equipClassesWorkService;
    
	@Override
	public BaseService<EquipClassesWork> getBaseService() {
		return equipClassesWorkService;
	}	    	
    
	private EquipClassesWorkVo getVo(EquipClassesWork equipClassesWork, CommonParam commonParam) throws BusinessException, SQLException {
		EquipClassesWorkVo vo = new EquipClassesWorkVo(equipClassesWork);
		// TODO 此处填充其它关联字段的处理代码
		return vo;
	} 
	
	private EquipClassesWorkVo getExtendVo(EquipClassesWork equipClassesWork, CommonParam commonParam) throws BusinessException, SQLException {
		EquipClassesWorkVo vo = this.getVo(equipClassesWork, commonParam);
		// TODO 此处填充其它关联字段的处理代码
		return vo;
	} 
		
	private List<EquipClassesWorkVo> getVoList(List<EquipClassesWork> list, CommonParam commonParam) throws BusinessException, SQLException {
		List<EquipClassesWorkVo> voList = new ArrayList<EquipClassesWorkVo>();
		for (EquipClassesWork entity : list) {
			voList.add(this.getVo(entity, commonParam));
		}
		
		return voList;
	}	
	
	private List<EquipClassesWorkVo> getExtendVoList(List<EquipClassesWork> list, CommonParam commonParam) throws BusinessException, SQLException {
		List<EquipClassesWorkVo> voList = new ArrayList<EquipClassesWorkVo>();
		for (EquipClassesWork entity : list) {
			voList.add(this.getExtendVo(entity, commonParam));
		}
		
		return voList;
	}	
	
	public EquipClassesWorkVo getVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		EquipClassesWork entity = this.getBaseService().selectById(id, commonParam);
		
		return this.getVo(entity, commonParam);
	}
	
	public List<EquipClassesWorkVo>  selectListVoByParamVo(EquipClassesWorkParamVo equipClassesWork, CommonParam commonParam) throws BusinessException, SQLException {
		if(equipClassesWork==null){
			equipClassesWork = new EquipClassesWorkParamVo();
		}
		equipClassesWork.setTenantId(commonParam.getTenantId());	
	
		List<EquipClassesWork> list = (List<EquipClassesWork>) this.getBaseService().selectListByParamVo(equipClassesWork, commonParam);
		
		return getVoList(list, commonParam);
	}
	
	@SuppressWarnings({"unchecked", "rawtypes" })
	public PageInfo<EquipClassesWorkVo> selectPageVoByParamVo(EquipClassesWorkParamVo equipClassesWork, CommonParam commonParam, int pageNo, int pageSize) 
			throws BusinessException, SQLException {
		if(equipClassesWork==null){
			equipClassesWork = new EquipClassesWorkParamVo();
		}
		equipClassesWork.setTenantId(commonParam.getTenantId());	
					
		PageInfo<EquipClassesWork> list  = (PageInfo<EquipClassesWork>) this.getBaseService().selectPageByParamVo(equipClassesWork, commonParam, pageNo, pageSize);
		List<EquipClassesWorkVo> volist = new ArrayList<EquipClassesWorkVo>();
		
		Iterator<EquipClassesWork> iter = list.getList().iterator();
		EquipClassesWorkVo vo = null;
		while (iter.hasNext()) {
			vo = this.getVo(iter.next(), commonParam);
			volist.add(vo);
		}
		
		Page<EquipClassesWorkVo> vpage = new Page<EquipClassesWorkVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());
		
		return new PageInfo(vpage);
	}	
	
	public EquipClassesWorkVo getExtendVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		EquipClassesWork entity = this.getBaseService().selectById(id, commonParam);
		
		return this.getExtendVo(entity, commonParam);
	}
	
	public List<EquipClassesWorkVo>  selectListExtendVoByParamVo(EquipClassesWorkParamVo equipClassesWork, CommonParam commonParam) 
			throws BusinessException, SQLException {
		if(equipClassesWork==null){
			equipClassesWork = new EquipClassesWorkParamVo();
		}
		equipClassesWork.setTenantId(commonParam.getTenantId());	
					
		List<EquipClassesWork> list = (List<EquipClassesWork>) this.getBaseService().selectListByParamVo(equipClassesWork, commonParam);
		
		return this.getExtendVoList(list, commonParam);
	}
	
	@SuppressWarnings({"unchecked", "rawtypes" })
	public PageInfo<EquipClassesWorkVo> selectPageExtendVoByParamVo(EquipClassesWorkParamVo equipClassesWork, CommonParam commonParam, int pageNo, int pageSize) 
			throws BusinessException, SQLException {
		if(equipClassesWork==null){
			equipClassesWork = new EquipClassesWorkParamVo();
		}
		equipClassesWork.setTenantId(commonParam.getTenantId());	
					
		PageInfo<EquipClassesWork> list  = (PageInfo<EquipClassesWork>) this.getBaseService().selectPageByParamVo(equipClassesWork, commonParam, pageNo, pageSize);
		List<EquipClassesWorkVo> volist = new ArrayList<EquipClassesWorkVo>();
		
		Iterator<EquipClassesWork> iter = list.getList().iterator();
		EquipClassesWorkVo vo = null;
		while (iter.hasNext()) {
			vo = this.getExtendVo(iter.next(), commonParam);
			volist.add(vo);
		}
		
		Page<EquipClassesWorkVo> vpage = new Page<EquipClassesWorkVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());
		
		return new PageInfo(vpage);
	}	
	
	public ResultMessage saveOrUpdate(EquipClassesWorkParamVo equipClassesWorkParamVo, CommonParam commonParam) { 
		ResultMessage resultMessage = new ResultMessage(); 
		EquipClassesWork equipClassesWork = null;
		try {
			
			if (equipClassesWorkParamVo.getClassesCode() == null) {
				resultMessage.addErr("设备分类编码不能为空");
				return resultMessage;
			}
			if (equipClassesWorkParamVo.getClassesName() == null) {
				resultMessage.addErr("设备分类名称不能为空");
				return resultMessage;
			}
			if (equipClassesWorkParamVo.getSortNo() == null) {
				resultMessage.addErr("排序号不能为空");
				return resultMessage;
			}

			if (equipClassesWorkParamVo.getId() == null) {//新增
			 
				equipClassesWorkParamVo.setTenantId(commonParam.getTenantId());
				equipClassesWork = equipClassesWorkService.saveOrUpdate(equipClassesWorkParamVo,
						commonParam);
				resultMessage.setIsSuccess(true);
			} else {  //修改
				EquipClassesWork equipClassesWorkVoTemp = this.selectById(equipClassesWorkParamVo
						.getId(), commonParam);

				BeanUtil.copyNotNullProperties(equipClassesWorkVoTemp,
						equipClassesWorkParamVo);
  
				equipClassesWork = equipClassesWorkService.saveOrUpdate(
						equipClassesWorkVoTemp, commonParam); 
  
				resultMessage.setIsSuccess(true);
			}
			
			resultMessage.setBaseEntity(equipClassesWork);
		} catch (BusinessException e) {
			resultMessage.addErr(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return resultMessage;
	}	
}
