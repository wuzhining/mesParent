package com.techsoft.client.service.equip;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageInfo;
import com.techsoft.common.BaseClientServiceImpl;
import com.techsoft.common.BaseService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.SQLException;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.utils.BeanUtil;
import com.techsoft.entity.common.ConfigDictionary;
import com.techsoft.entity.common.EquipClassesWork;
import com.techsoft.entity.common.EquipSpecsWork;
import com.techsoft.entity.common.EquipWork;
import com.techsoft.entity.common.EquipWorkClasses;
import com.techsoft.entity.common.StructFactory;
import com.techsoft.entity.common.StructProcessNode;
import com.techsoft.entity.common.StructProductionline;
import com.techsoft.entity.common.StructWorkshop;
import com.techsoft.entity.common.StructWorkshopArea;
import com.techsoft.entity.common.StructWorkstation;
import com.techsoft.entity.equip.EquipWorkParamVo;
import com.techsoft.entity.equip.EquipWorkVo;
import com.techsoft.service.config.ConfigCodeRuleService;
import com.techsoft.service.config.ConfigDictionaryService;
import com.techsoft.service.equip.EquipClassesWorkService;
import com.techsoft.service.equip.EquipSpecsWorkService;
import com.techsoft.service.equip.EquipWorkClassesService;
import com.techsoft.service.equip.EquipWorkService;
import com.techsoft.service.struct.StructFactoryService;
import com.techsoft.service.struct.StructProcessNodeService;
import com.techsoft.service.struct.StructProductionlineService;
import com.techsoft.service.struct.StructWorkshopAreaService;
import com.techsoft.service.struct.StructWorkshopService;
import com.techsoft.service.struct.StructWorkstationService;

@org.springframework.stereotype.Service
public class ClientEquipWorkServiceImpl extends BaseClientServiceImpl<EquipWork> implements ClientEquipWorkService {
	@com.alibaba.dubbo.config.annotation.Reference
	private EquipWorkService equipWorkService;
	@com.alibaba.dubbo.config.annotation.Reference
	private ConfigDictionaryService configDictionaryService;;
	@com.alibaba.dubbo.config.annotation.Reference
	private StructFactoryService structFactoryService;
	@com.alibaba.dubbo.config.annotation.Reference
	private StructWorkshopAreaService structWorkshopAreaService;
	@com.alibaba.dubbo.config.annotation.Reference
	private StructProductionlineService structProductionlineService;
	@com.alibaba.dubbo.config.annotation.Reference
	private EquipClassesWorkService equipClassesWorkService;
	@com.alibaba.dubbo.config.annotation.Reference
	private StructProcessNodeService structProcessNodeService;
	@com.alibaba.dubbo.config.annotation.Reference
	private StructWorkshopService structWorkshopService;
	@com.alibaba.dubbo.config.annotation.Reference
	private ConfigCodeRuleService configCodeRuleService;
	@com.alibaba.dubbo.config.annotation.Reference
	private EquipSpecsWorkService equipSpecsWorkService;
	@com.alibaba.dubbo.config.annotation.Reference
	private StructWorkstationService structWorkstationService;
	@Override
	public BaseService<EquipWork> getBaseService() {
		return equipWorkService;
	}

	private EquipWorkVo getVo(EquipWork equipWork, CommonParam commonParam) throws BusinessException, SQLException {
		EquipWorkVo vo = new EquipWorkVo(equipWork);
		if (vo.getFactoryId() != null && vo.getFactoryId() > 0L) {
			StructFactory structFactory = structFactoryService.selectById(vo.getFactoryId(), commonParam);
			if (structFactory != null) {
				vo.setStructFactory(structFactory);
			}
		}
		if (vo.getClassesId() != null && vo.getClassesId() > 0L) {
			EquipClassesWork equipWorkClasses = equipClassesWorkService.selectById(vo.getClassesId(), commonParam);
			if (equipWorkClasses != null) {
				vo.setEquipClassesWork(equipWorkClasses);
			}
		}
		if (vo.getEquipStatusDictId() != null && vo.getEquipStatusDictId() > 0L) {
			ConfigDictionary ConfigDictionaryS = configDictionaryService.selectById(vo.getEquipStatusDictId(),
					commonParam);
			if (ConfigDictionaryS != null) {
				vo.setConfigDictionaryStatus(ConfigDictionaryS);
			}
		}
		if (vo.getWorkshopAreaId() != null && vo.getWorkshopAreaId() > 0L) {
			StructWorkshopArea structWorkshopArea = structWorkshopAreaService.selectById(vo.getWorkshopAreaId(),
					commonParam);
			if (structWorkshopArea != null) {
				vo.setStructWorkshopArea(structWorkshopArea);
			}
		}
		if (vo.getProductionlineId() != null && vo.getProductionlineId() > 0L) {
			StructProductionline structProductionline = structProductionlineService.selectById(vo.getProductionlineId(),
					commonParam);
			if (structProductionline != null) {
				vo.setStructProductionline(structProductionline);
			}
		}
		if (vo.getProcessNodeId() != null && vo.getProcessNodeId() > 0L) {
			StructProcessNode structProcessNode = structProcessNodeService.selectById(vo.getProcessNodeId(),
					commonParam);
			if (structProcessNode != null) {
				vo.setStructProcessNode(structProcessNode);
			}
		}
		//车间
		if (vo.getWorkshopId() != null && vo.getWorkshopId() > 0L) {
			StructWorkshop structWorkshop = structWorkshopService.selectById(vo.getWorkshopId(), commonParam);
			if (structWorkshop != null) {
				vo.setStructWorkshop(structWorkshop);
			}
		}
		//工位
		if(vo.getWorkstationId() != null && vo.getWorkstationId() > 0L){
			StructWorkstation structWorkstation = structWorkstationService.selectById(vo.getWorkstationId(), commonParam);
			if(structWorkstation != null){
				vo.setStructWorkstation(structWorkstation);
			}
		}
		//设备品种规格
		if(vo.getSpecsWorkId() != null && vo.getSpecsWorkId() > 0L){
			EquipSpecsWork equipSpecsWork = equipSpecsWorkService.selectById(vo.getSpecsWorkId(), commonParam);
			if(equipSpecsWork != null){
				vo.setEquipSpecsWork(equipSpecsWork);
			}
		}
		
		return vo;
	}

	private EquipWorkVo getExtendVo(EquipWork equipWork, CommonParam commonParam)
			throws BusinessException, SQLException {
		EquipWorkVo vo = this.getVo(equipWork, commonParam);

		return vo;
	}

	private List<EquipWorkVo> getVoList(List<EquipWork> list, CommonParam commonParam)
			throws BusinessException, SQLException {
		List<EquipWorkVo> voList = new ArrayList<EquipWorkVo>();
		for (EquipWork entity : list) {
			voList.add(this.getVo(entity, commonParam));
		}

		return voList;
	}

	private List<EquipWorkVo> getExtendVoList(List<EquipWork> list, CommonParam commonParam)
			throws BusinessException, SQLException {
		List<EquipWorkVo> voList = new ArrayList<EquipWorkVo>();
		for (EquipWork entity : list) {
			voList.add(this.getExtendVo(entity, commonParam));
		}

		return voList;
	}

	public EquipWorkVo getVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		EquipWork entity = this.getBaseService().selectById(id, commonParam);

		return this.getVo(entity, commonParam);
	}

	public List<EquipWorkVo> selectListVoByParamVo(EquipWorkParamVo equipWork, CommonParam commonParam)
			throws BusinessException, SQLException {
		if (equipWork == null) {
			equipWork = new EquipWorkParamVo();
		}
		equipWork.setTenantId(commonParam.getTenantId());

		List<EquipWork> list = (List<EquipWork>) this.getBaseService().selectListByParamVo(equipWork, commonParam);

		return getVoList(list, commonParam);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public PageInfo<EquipWorkVo> selectPageVoByParamVo(EquipWorkParamVo equipWork, CommonParam commonParam, int pageNo,
			int pageSize) throws BusinessException, SQLException {
		if (equipWork == null) {
			equipWork = new EquipWorkParamVo();
		}
		equipWork.setTenantId(commonParam.getTenantId());

		PageInfo<EquipWork> list = (PageInfo<EquipWork>) this.getBaseService().selectPageByParamVo(equipWork,
				commonParam, pageNo, pageSize);
		List<EquipWorkVo> volist = new ArrayList<EquipWorkVo>();

		Iterator<EquipWork> iter = list.getList().iterator();
		EquipWorkVo vo = null;
		while (iter.hasNext()) {
			vo = this.getVo(iter.next(), commonParam);
			volist.add(vo);
		}

		Page<EquipWorkVo> vpage = new Page<EquipWorkVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());

		return new PageInfo(vpage);
	}

	public EquipWorkVo getExtendVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		EquipWork entity = this.getBaseService().selectById(id, commonParam);

		return this.getExtendVo(entity, commonParam);
	}

	public List<EquipWorkVo> selectListExtendVoByParamVo(EquipWorkParamVo equipWork, CommonParam commonParam)
			throws BusinessException, SQLException {
		if (equipWork == null) {
			equipWork = new EquipWorkParamVo();
		}
		equipWork.setTenantId(commonParam.getTenantId());

		List<EquipWork> list = (List<EquipWork>) this.getBaseService().selectListByParamVo(equipWork, commonParam);

		return this.getExtendVoList(list, commonParam);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public PageInfo<EquipWorkVo> selectPageExtendVoByParamVo(EquipWorkParamVo equipWork, CommonParam commonParam,
			int pageNo, int pageSize) throws BusinessException, SQLException {
		if (equipWork == null) {
			equipWork = new EquipWorkParamVo();
		}
		equipWork.setTenantId(commonParam.getTenantId());

		PageInfo<EquipWork> list = (PageInfo<EquipWork>) this.getBaseService().selectPageByParamVo(equipWork,
				commonParam, pageNo, pageSize);
		List<EquipWorkVo> volist = new ArrayList<EquipWorkVo>();

		Iterator<EquipWork> iter = list.getList().iterator();
		EquipWorkVo vo = null;
		while (iter.hasNext()) {
			vo = this.getExtendVo(iter.next(), commonParam);
			volist.add(vo);
		}

		Page<EquipWorkVo> vpage = new Page<EquipWorkVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());

		return new PageInfo(vpage);
	}

	public ResultMessage saveOrUpdate(EquipWorkParamVo equipWorkParamVo, CommonParam commonParam) {
		ResultMessage resultMessage = new ResultMessage();
		EquipWork equipWork = null;
		if(equipWorkParamVo.getWorkshopAreaId() == null){
			resultMessage.addErr("车间区域不能为空");
			return resultMessage;
		}
		try {
			if(equipWorkParamVo.getSpecsWorkId()!=null){
				EquipSpecsWork equipSpecsWork = equipSpecsWorkService.selectById(equipWorkParamVo.getSpecsWorkId(), commonParam);
				equipWorkParamVo.setClassesId(equipSpecsWork.getClassesId());
				
			}
			
			if (equipWorkParamVo.getId() == null) {// 新增
				// 生成编码 
				String  code = equipWorkParamVo.getEquipCode();
				if (StringUtils.isBlank(code)) {
					code = configCodeRuleService.createCode(EquipWork.class.getName(), null, null, commonParam);
					equipWorkParamVo.setEquipCode(code);
				}
				if (StringUtils.isBlank(code)) {
					resultMessage.addErr("编码不能为空");
					return resultMessage;
				}
				//检验编码是否已存在
				EquipWorkParamVo equipWorkSearch = new EquipWorkParamVo();
				equipWorkSearch.setEquipCode(code);
				List<EquipWork> list = equipWorkService.selectListByParamVo(equipWorkSearch, commonParam);
				if((list!=null)&&(!list.isEmpty())){
					resultMessage.addErr("设备规格编码已经存在");
					return resultMessage;
				}
				
				/*Long workstation = equipWorkParamVo.getWorkstationId();
				//检验工位是否已存在
				EquipWorkParamVo equipWorkstationSearch = new EquipWorkParamVo();
				equipWorkstationSearch.setWorkstationId(workstation);
				List<EquipWork> liststation = equipWorkService.selectListByParamVo(equipWorkstationSearch, commonParam);
				if((liststation!=null)&&(!liststation.isEmpty())){
					resultMessage.addErr("工位不能重复，工位已经存在");
					return resultMessage;
				}*/
				equipWorkParamVo.setTenantId(commonParam.getTenantId());
				equipWork = equipWorkService.saveOrUpdate(equipWorkParamVo, commonParam);

				resultMessage.setIsSuccess(true);

			} else { // 修改
				EquipWork equipWorkVoTemp = this.selectById(equipWorkParamVo.getId(), commonParam);
				Long workstation = equipWorkParamVo.getWorkstationId();
				//检验工位是否已存在
				/*EquipWorkParamVo equipWorkstationSearch = new EquipWorkParamVo();
				equipWorkstationSearch.setWorkstationId(workstation);
				List<EquipWork> liststation = equipWorkService.selectListByParamVo(equipWorkstationSearch, commonParam);
				if((liststation!=null)&&(!liststation.isEmpty())){
					resultMessage.addErr("工位不能重复，工位已经存在");
					return resultMessage;
				}*/
				BeanUtil.copyNotNullProperties(equipWorkVoTemp, equipWorkParamVo);

				equipWork = equipWorkService.saveOrUpdate(equipWorkVoTemp, commonParam);

				resultMessage.setIsSuccess(true);
			}

			resultMessage.setBaseEntity(equipWork);
		} catch (BusinessException e) {
			resultMessage.addErr(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return resultMessage;
	}
}
