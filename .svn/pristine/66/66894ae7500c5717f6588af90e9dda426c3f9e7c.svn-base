package com.techsoft.controller.product;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageInfo;

import com.techsoft.common.BusinessException;
import com.techsoft.common.constants.Constants;
import com.techsoft.common.enums.EnumDictionary;
import com.techsoft.common.maps.MapUserStatus;
import com.techsoft.common.maps.MapYesOrNo;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.persistence.ReturnPageInfo;
import com.techsoft.common.SQLException;
import com.techsoft.controller.BaseController;
import com.techsoft.client.service.barcode.ClientBarcodeMainService;
import com.techsoft.client.service.config.ClientConfigDictionaryService;
import com.techsoft.client.service.firm.ClientFirmPartnerService;
import com.techsoft.client.service.product.ClientProductMainService;
import com.techsoft.client.service.product.ClientProductMaterialService;
import com.techsoft.client.service.struct.ClientStructWarehouseService;
import com.techsoft.entity.product.ProductMaterialVo;
import com.techsoft.entity.struct.StructWarehouseParamVo;
import com.techsoft.entity.warehouse.WarehouseLocationParamVo;
import com.techsoft.entity.common.ConfigDictionary;
import com.techsoft.entity.common.FirmPartner;
import com.techsoft.entity.common.ProductMain;
import com.techsoft.entity.common.ProductMaterial;
import com.techsoft.entity.common.StructWarehouse;
import com.techsoft.entity.common.WarehouseLocation;
import com.techsoft.entity.firm.FirmPartnerParamVo;
import com.techsoft.entity.product.ProductMainParamVo;
import com.techsoft.entity.product.ProductMaterialParamVo;

@Controller
@RequestMapping("/product/productMaterial")
public class ProductMaterialController extends BaseController {
	@Autowired
	private ClientProductMaterialService clientProductMaterialService;
	@Autowired
	private ClientProductMainService clientProductMainService;
	@Autowired
	private ClientConfigDictionaryService clientConfigDictionaryService;
	@Autowired
	private ClientStructWarehouseService clientStructWarehouseService;
	@Autowired
	private ClientFirmPartnerService clientFirmPartnerService;
	@Autowired
	private ClientBarcodeMainService clientBarcodeMainService;
	
	/**
	 * 页面关联数据初始化
	 * @param modelAndView
	 */
	public void initData(ModelAndView modelAndView) { 
		modelAndView.addObject("mapYesOrNo", MapYesOrNo.getMap());  
		modelAndView.addObject("mapUserStatus", MapUserStatus.getMap());  
	try {
			//取仓库集合
			StructWarehouseParamVo ParamVowarehosue = new StructWarehouseParamVo();
			List<StructWarehouse> warehouseList = clientStructWarehouseService.selectListByParamVo(ParamVowarehosue,this.getCommonParam(null));
			modelAndView.addObject("warehouseList", warehouseList);
			//取产品集合
			ProductMainParamVo productMainParamVo = new ProductMainParamVo();
			List<ProductMain> productMainList =clientProductMainService.selectListByParamVo(productMainParamVo, this.getCommonParam(null));
			modelAndView.addObject("productMainList", productMainList);
			//取供应商公司集合
			FirmPartnerParamVo firmPartnerParamVo = new FirmPartnerParamVo();
			List<FirmPartner> firmPartnerList = clientFirmPartnerService.selectListByParamVo(firmPartnerParamVo, this.getCommonParam(null));
			modelAndView.addObject("firmPartnerList", firmPartnerList);
			//产品类型数据字典
			List<ConfigDictionary> productTypeList = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.PRODUCT_TYPE.getValue());
			//实物状态数据字典 
			List<ConfigDictionary> materialStatusDictList = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.PRODUCT_MATERIAL_STATUS.getValue());
			modelAndView.addObject("materialStatusDictList", materialStatusDictList);
			
			//库存单位数据字典 
			List<ConfigDictionary> stockUnitDictList = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.PRODUCT_CLASSES_UNIT.getValue());
			modelAndView.addObject("stockUnitDictList", stockUnitDictList);
			
			//生产单位数据字典 
			List<ConfigDictionary> workUnitDictList = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.PRODUCT_CLASSES_UNIT.getValue());
			modelAndView.addObject("workUnitDictList", workUnitDictList);
			
			
			
			modelAndView.addObject("productTypeList", productTypeList);
		}catch (BusinessException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	@RequestMapping("/list")
	public ModelAndView list(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("product/productMaterial-list");
		return modelAndView;
	}
	
	@RequestMapping("/productMaterialOpen")
	public ModelAndView openWinProduct(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("product/productMaterialOpen");
		return modelAndView;
	}
	@RequestMapping("/edit")
	public ModelAndView edit(HttpServletRequest request, Long id,Long productId) {
		ModelAndView modelAndView = new ModelAndView();
		ProductMaterialVo entity = new ProductMaterialVo();
		try {
			ProductMainParamVo productMainParamVo = new ProductMainParamVo();
			if (id != null) {
				entity = clientProductMaterialService.getVoByID(id, this.getCommonParam(request));
				//取产品集合
				productMainParamVo.setId(entity.getProductId());
				
			}
			 
		
			modelAndView.setViewName("product/productMaterial-edit");
			modelAndView.addObject("entity", entity);
			initData(modelAndView);
		}catch (BusinessException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return modelAndView;
	}

	
	@ResponseBody
	@RequestMapping("/list/json")
	@SuppressWarnings("rawtypes")	
	public ReturnPageInfo listJson(HttpServletRequest request,
			ProductMaterialParamVo productMaterialParamVo, Integer pageIndex, Integer pageSize) {
		PageInfo pageInfo = null;
		Integer pageNumber = 0;
		if (pageSize != null) {
			pageNumber = pageSize;
		} else {
			pageNumber = Constants.SEARCH_PAGE_SIZE;
		}		
		try {
            if(productMaterialParamVo==null){
            	productMaterialParamVo = new ProductMaterialParamVo();
            }
			pageInfo = clientProductMaterialService.selectPageVoByParamVo(
					productMaterialParamVo, this.getCommonParam(request),
					pageIndex, pageNumber);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage save(HttpServletRequest request,
			ProductMaterialParamVo productMaterialParamVo) {
		ResultMessage resultMessage = new ResultMessage();
	 
	    productMaterialParamVo.setModifyUserId(getLoginUserId(request)); 
		resultMessage = clientProductMaterialService.saveOrUpdate(productMaterialParamVo,
				this.getCommonParam(request));

		return resultMessage;
	}

	@RequestMapping("/skuOpen")
	public ModelAndView skuOpen(HttpServletRequest request, Long productId) {
		ModelAndView modelAndView = new ModelAndView();
		ProductMaterialVo entity = new ProductMaterialVo();
		try {
		 
			if(productId!=null){
				ProductMain productMain=clientProductMainService.selectById(productId,  this.getCommonParam(null));
				String skuName="";
				if(productMain!=null){
						skuName=productMain.getSkuName();
				}
				if(skuName!=""&&skuName!=null){
					String[] skuNames = skuName.split(",");
					List<Map<String,String>> skuNameList=new ArrayList<>();
					if (skuNames.length>0){
						for (String name : skuNames) {
							Map<String,String> map=new HashMap<>();
							map.put("skuName", name);
							skuNameList.add(map);
						}
						modelAndView.addObject("skuNameList", skuNameList);
					}
					
				}
			}
			modelAndView.setViewName("product/productSkuOpen");
			modelAndView.addObject("entity", entity);
			initData(modelAndView);
		} catch (SQLException | BusinessException e) {
			e.printStackTrace();
		}
		return modelAndView;
	}
	/**
	 * 根据产品规格ID查询产品
	 * @param request
	 * @param productMaterialParamVo
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/selectProductByMaterilId")
	public List<ProductMaterial> selectProductByMaterilId(HttpServletRequest request, ProductMaterialParamVo productMaterialParamVo) {
			if (productMaterialParamVo == null) {
				productMaterialParamVo = new ProductMaterialParamVo();
			}
			productMaterialParamVo.setTenantId(getLoginTenantId(request));
			List<ProductMaterial> productMaterialList = new ArrayList<ProductMaterial>();
			try {
				//获取批次号
				String batchNumber=clientBarcodeMainService.getBatchNumber(this.getCommonParam(request));
				
				productMaterialList=clientProductMaterialService.selectListByParamVo(productMaterialParamVo,this.getCommonParam(request));
				
				for (ProductMaterial productMaterial : productMaterialList) {
					productMaterial.setRemark(batchNumber);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (BusinessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		return productMaterialList;
	}

	@RequestMapping("/listMat")
	public ModelAndView lineProcess(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("struct/structProcedureInstruct-mat");
		return modelAndView;
	}
	
}
