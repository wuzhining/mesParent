package com.techsoft.controller.bill;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageInfo;
import com.techsoft.client.service.bill.ClientBillWorkorderService;
import com.techsoft.client.service.config.ClientConfigDictionaryService;
import com.techsoft.client.service.firm.ClientFirmPartnerService;
import com.techsoft.client.service.product.ClientProductBomService;
import com.techsoft.client.service.product.ClientProductMainService;
import com.techsoft.client.service.struct.ClientStructFactoryService;
import com.techsoft.client.service.struct.ClientStructProcessService;
import com.techsoft.client.service.struct.ClientStructProductionlineServiceImpl;
import com.techsoft.client.service.struct.ClientStructWorkshopService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.constants.Constants;
import com.techsoft.common.enums.EnumCompanyPartnerType;
import com.techsoft.common.enums.EnumDictionary;
import com.techsoft.common.maps.MapUserStatus;
import com.techsoft.common.maps.MapYesOrNo;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.persistence.ReturnPageInfo;
import com.techsoft.common.utils.JsonUtils;
import com.techsoft.controller.BaseController;
import com.techsoft.entity.bill.BillWorkorderParamVo;
import com.techsoft.entity.bill.BillWorkorderVo;
import com.techsoft.entity.common.ConfigDictionary;
import com.techsoft.entity.common.FirmPartner;
import com.techsoft.entity.common.ProductBom;
import com.techsoft.entity.common.ProductMain;
import com.techsoft.entity.common.ProductMaterial;
import com.techsoft.entity.common.StructFactory;
import com.techsoft.entity.common.StructProcess;
import com.techsoft.entity.common.StructProductionline;
import com.techsoft.entity.common.StructWorkshop;
import com.techsoft.entity.firm.FirmPartnerParamVo;
import com.techsoft.entity.firm.FirmPartnerVo;
import com.techsoft.entity.product.ProductBomParamVo;
import com.techsoft.entity.product.ProductMainParamVo;
import com.techsoft.entity.struct.StructFactoryParamVo;
import com.techsoft.entity.struct.StructProcessParamVo;
import com.techsoft.entity.struct.StructProductionlineParamVo;
import com.techsoft.entity.struct.StructWorkshopParamVo;

@Controller
@RequestMapping("/bill/billWorkorder")
public class BillWorkorderController extends BaseController {
	@Autowired
	private ClientBillWorkorderService clientBillWorkorderService;
	@Autowired
	private ClientConfigDictionaryService clientConfigDictionaryService;
	@Autowired
	private ClientStructWorkshopService clientStructWorkshopService;
	@Autowired
	private ClientProductMainService clientProductMainService;
	@Autowired
	private ClientStructProcessService clientStructProcessService;
	@Autowired
	private ClientProductBomService clientProductBomService;
	@Autowired
	private ClientFirmPartnerService clientFirmPartnerService;
	@Autowired
	private ClientStructFactoryService clientStructFactoryService;
	@Autowired
	private ClientStructProductionlineServiceImpl clientStructProductionlineServiceImpl;

	/**
	 * 页面关联数据初始化
	 * 
	 * @param modelAndView
	 */
	public void initData(ModelAndView modelAndView, HttpServletRequest request) {
		try {
			// 客户
			FirmPartnerParamVo firmPartner = new FirmPartnerParamVo();
			firmPartner.setPartnerTypeDictId(EnumCompanyPartnerType.CUSTOMER.getValue());
			List<FirmPartner> customerList = clientFirmPartnerService.selectListByParamVo(firmPartner,
					this.getCommonParam(request));

			modelAndView.addObject("customerList", customerList);

			// 工厂
			List<StructFactory> structFactoryList = clientStructFactoryService
					.selectListByParamVo(new StructFactoryParamVo(), this.getCommonParam(request));
			modelAndView.addObject("structFactoryList", structFactoryList);

			// 车间
			List<StructWorkshop> structWorkshopList = clientStructWorkshopService
					.selectListByParamVo(new StructWorkshopParamVo(), this.getCommonParam(request));
			modelAndView.addObject("structWorkshopList", structWorkshopList);

			// 工艺流程
			List<StructProcess> structProcessList = clientStructProcessService
					.selectListByParamVo(new StructProcessParamVo(), this.getCommonParam(request));
			modelAndView.addObject("structProcessList", structProcessList);

			// 制程
			List<ConfigDictionary> processList = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.STRUCT_PROCESS.getValue());
			modelAndView.addObject("processList", processList);

			// 物品ID
			List<ProductMain> productMainList = clientProductMainService.selectListByParamVo(new ProductMainParamVo(),
					this.getCommonParam(null));
			modelAndView.addObject("productMainList", productMainList);

			// 产品BOM
			List<ProductBom> productBomList = clientProductBomService.selectListByParamVo(new ProductBomParamVo(),
					this.getCommonParam(null));
			modelAndView.addObject("productBomList", productBomList);

			// 审核状态数据字典
			List<ConfigDictionary> auditStatusDictList = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.AUDIT_STATUS.getValue());
			modelAndView.addObject("auditStatusDictList", auditStatusDictList);

			// 工单状态
			List<ConfigDictionary> workorderStatusList = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.BILL_STATUS_WORKORDER.getValue());
			modelAndView.addObject("workorderStatusList", workorderStatusList);
			modelAndView.addObject("mapYesOrNo", MapYesOrNo.getMap());
			modelAndView.addObject("mapUserStatus", MapUserStatus.getMap());
		} catch (BusinessException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@RequestMapping("/list")
	public ModelAndView list(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView, request);
		modelAndView.setViewName("bill/billWorkorder-list");
		return modelAndView;
	}

	@RequestMapping("/edit")
	public ModelAndView edit(HttpServletRequest request, Long id) {
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("bill/billWorkorder-edit");
		BillWorkorderVo entity = new BillWorkorderVo();
		try {

			if (id != null) {
				entity = clientBillWorkorderService.getVoByID(id, this.getCommonParam(request));
			} else {
				entity.setQuantityInput(0d);
				entity.setQuantityOutput(0d);
				entity.setQuantityMaximumInput(0d);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		modelAndView.addObject("entity", entity);
		initData(modelAndView, request);
		return modelAndView;
	}

	@ResponseBody
	@RequestMapping("/list/json")
	@SuppressWarnings("rawtypes")
	public ReturnPageInfo listJson(HttpServletRequest request, BillWorkorderParamVo billWorkorderParamVo,
			Integer pageIndex, Integer pageSize) {
		PageInfo pageInfo = null;
		Integer pageNumber = 0;
		if (pageSize != null) {
			pageNumber = pageSize;
		} else {
			pageNumber = Constants.SEARCH_PAGE_SIZE;
		}
		try {
			if (billWorkorderParamVo == null) {
				billWorkorderParamVo = new BillWorkorderParamVo();
			}
			pageInfo = clientBillWorkorderService.selectPageVoByParamVo(billWorkorderParamVo,
					this.getCommonParam(request), pageIndex, pageNumber);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage save(HttpServletRequest request, BillWorkorderParamVo billWorkorderParamVo) {
		ResultMessage resultMessage = new ResultMessage();

		billWorkorderParamVo.setModifyUserId(getLoginUserId(request));
		resultMessage = clientBillWorkorderService.saveOrUpdate(billWorkorderParamVo, this.getCommonParam(request));

		return resultMessage;
	}

	@RequestMapping(value = "/workorderCheck", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage workorderCheck(HttpServletRequest request, Long id) {
		ResultMessage resultMessage = new ResultMessage();
		BillWorkorderVo billWorkorderVo = new BillWorkorderVo();
		try {
			billWorkorderVo = clientBillWorkorderService.getVoByID(id, this.getCommonParam(request));
			resultMessage = clientBillWorkorderService.updateAudit(id, this.getCommonParam(request));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultMessage;
	}

	@RequestMapping("/viewTaskProcedure")
	public ModelAndView viewTaskProcedure(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView, request);
		modelAndView.setViewName("bill/viewTaskProcedure-list");
		return modelAndView;
	}

	@RequestMapping("/viewPlanMaterial")
	public ModelAndView viewPlanMaterial(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView, request);
		modelAndView.setViewName("bill/viewPlanMaterial-list");
		return modelAndView;
	}

	@RequestMapping("/viewPlanEquip")
	public ModelAndView viewPlanEquip(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView, request);
		modelAndView.setViewName("bill/viewPlanEquip-list");
		return modelAndView;
	}

	@RequestMapping("/viewEquipFixture")
	public ModelAndView viewEquipFixture(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView, request);
		modelAndView.setViewName("bill/viewEquipFixture-list");
		return modelAndView;
	}

	@RequestMapping("/viewPlanWorkstation")
	public ModelAndView viewPlanWorkstation(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView, request);
		modelAndView.setViewName("bill/viewPlanWorkstation-list");
		return modelAndView;
	}

	@RequestMapping("/viewProductionLineCheck")
	public ModelAndView viewProductionLineCheck(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView, request);
		// 工厂
		List<StructProductionline> productionlines;
		try {
			productionlines = clientStructProductionlineServiceImpl
					.selectListByParamVo(new StructProductionlineParamVo(), this.getCommonParam(request));
			modelAndView.addObject("productionlines", productionlines);
			modelAndView.setViewName("bill/viewProductionLineCheck-list");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return modelAndView;
	}

	@ResponseBody
	@RequestMapping("/viewProductionLineCheck/list/json")
	@SuppressWarnings("rawtypes")
	public ReturnPageInfo jsonProductionLineCheck(HttpServletRequest request,
			BillWorkorderParamVo billWorkorderParamVo) {
		PageInfo pageInfo = null;
		Integer pageNumber = 0;

		try {
			if (billWorkorderParamVo == null) {
				billWorkorderParamVo = new BillWorkorderParamVo();
			}
			pageInfo = clientBillWorkorderService.listProductBomProcessPage(billWorkorderParamVo.getId(),
					this.getCommonParam(request), pageNumber, pageNumber);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}
	
	@RequestMapping(value = "/viewProductionLineCheck/printBarcode", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage printBarcode(HttpServletRequest request,
			BillWorkorderParamVo billWorkorderParamVo) {
		ResultMessage resultMessage = new ResultMessage();
		try {
			resultMessage=clientBillWorkorderService.printBarcode(billWorkorderParamVo.getId(), this.getCommonParam(request));
		} catch (BusinessException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return resultMessage;
	}
	
 
	@RequestMapping(value = "/viewProductionLineCheck/updatStart", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage updatStart(HttpServletRequest request,
			BillWorkorderParamVo billWorkorderParamVo) {
		ResultMessage resultMessage = new ResultMessage();
		String item = request.getParameter("array");
		List<ProductBomParamVo> list = JsonUtils.conversionToList(item, ProductBomParamVo.class);
		List<StructProductionlineParamVo> productionlineList=new ArrayList<>();
		for (ProductBomParamVo productBomParamVo : list) {
			StructProductionlineParamVo paramVo=new StructProductionlineParamVo();
			if (productBomParamVo.getProductionlineId() == null) {
				resultMessage.setIsSuccess(false);
				resultMessage.setMessage("产线不能为空");
				return resultMessage;
			}
			paramVo.setId(Long.parseLong(productBomParamVo.getProductionlineId()));
			paramVo.setProductBomId(productBomParamVo.getId());
			productionlineList.add(paramVo);
		}
		resultMessage=clientBillWorkorderService.updatStart(Long.parseLong(list.get(0).getWorkorderId()), productionlineList, this.getCommonParam(request));
		return resultMessage;
	}
}
