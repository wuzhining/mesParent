package com.techsoft.controller.struct;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageInfo;
import com.techsoft.client.service.config.ClientConfigDictionaryService;
import com.techsoft.client.service.equip.ClientEquipWorkService;
import com.techsoft.client.service.struct.ClientStructFactoryService;
import com.techsoft.client.service.struct.ClientStructProductionlineService;
import com.techsoft.client.service.struct.ClientStructWorkshopService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.constants.Constants;
import com.techsoft.common.enums.EnumDictionary;
import com.techsoft.common.maps.MapUserStatus;
import com.techsoft.common.maps.MapYesOrNo;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.persistence.ReturnPageInfo;
import com.techsoft.controller.BaseController;
import com.techsoft.entity.common.ConfigDictionary;
import com.techsoft.entity.common.StructFactory;
import com.techsoft.entity.common.StructFloor;
import com.techsoft.entity.common.StructProductionline;
import com.techsoft.entity.common.StructWorkshop;
import com.techsoft.entity.equip.EquipWorkParamVo;
import com.techsoft.entity.struct.StructFactoryParamVo;
import com.techsoft.entity.struct.StructFloorParamVo;
import com.techsoft.entity.struct.StructProductionlineParamVo;
import com.techsoft.entity.struct.StructProductionlineVo;
import com.techsoft.entity.struct.StructWorkshopParamVo;

@Controller
@RequestMapping("/struct/structProductionline")
public class StructProductionlineController extends BaseController {
	@Autowired
	private ClientStructProductionlineService clientStructProductionlineService;
	@Autowired
	private ClientStructFactoryService clientStructFactoryService;
	@Autowired
	private ClientConfigDictionaryService clientConfigDictionaryService;
	@Autowired
	private ClientStructWorkshopService clientStructWorkshopService;
	@Autowired
	private ClientEquipWorkService clientEquipWorkService;
	
	/**
	 * 页面关联数据初始化
	 * 
	 * @param modelAndView
	 */
	public void initData(ModelAndView modelAndView) {
		try {
			//取车间集合
			StructWorkshopParamVo shopparamVo = new StructWorkshopParamVo();
			List<StructWorkshop> structWorkshopList = clientStructWorkshopService.selectListByParamVo(shopparamVo,this.getCommonParam(null));
					modelAndView.addObject("structWorkshopList", structWorkshopList);
			//取制程集合		
			List<ConfigDictionary> dictionaryList = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.STRUCT_PROCESS.getValue());
			modelAndView.addObject("dictionaryList", dictionaryList);
			//取工厂集合
			StructFactoryParamVo paramVo = new StructFactoryParamVo();
			List<StructFactory> factoryList = clientStructFactoryService.selectListByParamVo(paramVo,
					this.getCommonParam(null));
			  modelAndView.addObject("factoryList", factoryList);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		modelAndView.addObject("mapYesOrNo", MapYesOrNo.getMap());  
		modelAndView.addObject("mapUserStatus", MapUserStatus.getMap());  
	}
	
	@RequestMapping("/list")
	public ModelAndView list(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("struct/structProductionline-list");
		return modelAndView;
	}

	@RequestMapping("/edit")
	public ModelAndView edit(HttpServletRequest request, Long id) {
		ModelAndView modelAndView = new ModelAndView();
		try {
			//取车间集合
			StructWorkshopParamVo shopparamVo = new StructWorkshopParamVo();
			List<StructWorkshop> structWorkshopList = clientStructWorkshopService.selectListByParamVo(shopparamVo,this.getCommonParam(null));
					modelAndView.addObject("structWorkshopList", structWorkshopList);
			StructFactoryParamVo paramVo = new StructFactoryParamVo();
			List<StructFactory> factoryList = clientStructFactoryService.selectListByParamVo(paramVo,
					this.getCommonParam(request));
			modelAndView.addObject("factoryList", factoryList);
			List<ConfigDictionary> dictionaryList = clientConfigDictionaryService
					.selectListByParentId(EnumDictionary.STRUCT_PROCESS.getValue());
			modelAndView.addObject("dictionaryList", dictionaryList);
			StructProductionlineVo entity = new StructProductionlineVo();

			if (id != null) {
				entity = clientStructProductionlineService.getVoByID(id, this.getCommonParam(request));
			}

			modelAndView.addObject("entity", entity);
			modelAndView.setViewName("struct/structProductionline-edit");
			initData(modelAndView);
		} catch (BusinessException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return modelAndView;
	}

	@ResponseBody
	@RequestMapping("/list/json")
	@SuppressWarnings("rawtypes")
	public ReturnPageInfo listJson(HttpServletRequest request, StructProductionlineParamVo structProductionlineParamVo,
			Integer pageIndex, Integer pageSize) {
		PageInfo pageInfo = null;
		Integer pageNumber = 0;
		if (pageSize != null) {
			pageNumber = pageSize;
		} else {
			pageNumber = Constants.SEARCH_PAGE_SIZE;
		}		
		try {
			if (structProductionlineParamVo == null) {
				structProductionlineParamVo = new StructProductionlineParamVo();
			}
			pageInfo = clientStructProductionlineService.selectPageVoByParamVo(structProductionlineParamVo,
					this.getCommonParam(request), pageIndex, pageNumber);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}

	/**
	 * 根据工厂查产线list creater:Wang
	 * 
	 * @param request
	 * @param structProductionlineParamVo
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/linkProLineByFactory")
	public List<StructProductionline> proLineLink(HttpServletRequest request,
			StructProductionlineParamVo structProductionlineParamVo) {
		if (structProductionlineParamVo == null) {
			structProductionlineParamVo = new StructProductionlineParamVo();
		}
		structProductionlineParamVo.setTenantId(getLoginTenantId(request));
		List<StructProductionline> prolineList = new ArrayList<StructProductionline>();
		try {
			prolineList = clientStructProductionlineService.selectListByParamVo(structProductionlineParamVo,
					this.getCommonParam(request));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return prolineList;
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public ResultMessage save(HttpServletRequest request, StructProductionlineParamVo structProductionlineParamVo) {
		ResultMessage resultMessage = new ResultMessage();

		structProductionlineParamVo.setModifyUserId(getLoginUserId(request));
		resultMessage = clientStructProductionlineService.saveOrUpdate(structProductionlineParamVo,
				this.getCommonParam(request));

		return resultMessage;
	}

	@ResponseBody
	@RequestMapping("/list/listEquip")
	@SuppressWarnings("rawtypes")
	public ReturnPageInfo listEquip(HttpServletRequest request,Long lineId, EquipWorkParamVo equipWorkParamVo,
			Integer pageIndex, Integer pageSize) {
		PageInfo pageInfo = null;
		Integer pageNumber = 0;
		
		equipWorkParamVo.setProductionlineId(lineId);
		if (pageSize != null) {
			pageNumber = pageSize;
		} else {
			pageNumber = Constants.SEARCH_PAGE_SIZE;
		}		
		try {
			pageInfo = clientEquipWorkService.selectPageVoByParamVo(equipWorkParamVo,
					this.getCommonParam(request), pageIndex, pageNumber);
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		return new ReturnPageInfo(pageInfo);
	}
	
	@RequestMapping("/searchListEquip")
	public ModelAndView searchListEquip(HttpServletRequest request) {
		ModelAndView modelAndView = new ModelAndView();
		initData(modelAndView);
		modelAndView.setViewName("struct/structLineEquip");
		return modelAndView;
	}
	
}
