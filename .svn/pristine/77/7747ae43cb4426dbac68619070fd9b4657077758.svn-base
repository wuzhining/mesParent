package com.techsoft.controller.pda;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.techsoft.client.service.barcode.ClientBarcodeMainService;
import com.techsoft.client.service.bill.ClientBillWorkorderService;
import com.techsoft.client.service.config.ClientConfigDictionaryService;
import com.techsoft.client.service.equip.ClientEquipFixtureService;
import com.techsoft.client.service.equip.ClientEquipWorkService;
import com.techsoft.client.service.equip.ClientEquipWorkStackProductService;
import com.techsoft.client.service.product.ClientProductBomService;
import com.techsoft.client.service.product.ClientProductMainService;
import com.techsoft.client.service.struct.ClientStructProcessNodeService;
import com.techsoft.client.service.struct.ClientStructProcessProductService;
import com.techsoft.client.service.struct.ClientStructProcessService;
import com.techsoft.client.service.struct.ClientStructWorkshopService;
import com.techsoft.client.service.work.ClientWorkPlanMaterialService;
import com.techsoft.client.service.work.ClientWorkTaskProcedureService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.controller.BaseController;
import com.techsoft.entity.common.BarcodeMain;
import com.techsoft.entity.equip.EquipWorkStackProductVo;
import com.techsoft.entity.work.WorkTaskProcedureVo;

@Controller
@RequestMapping("/pda/workmes")
public class PdaWorkmesController extends BaseController {
	@Autowired
	private ClientBillWorkorderService clientBillWorkorderService;
	@Autowired
	private ClientConfigDictionaryService clientConfigDictionaryService;
	@Autowired
	private ClientStructWorkshopService clientStructWorkshopService;
	@Autowired
	private ClientProductMainService clientProductMainService;
	@Autowired
	private ClientStructProcessService clientStructProcessService;
	@Autowired
	private ClientProductBomService clientProductBomService;
	@Autowired
	private ClientWorkTaskProcedureService clientWorkTaskProcedureService;
	@Autowired
	private ClientWorkPlanMaterialService clientWorkPlanMaterialService;
	@Autowired
	private ClientStructProcessProductService clientStructProcessProductService;
	@Autowired
	private ClientStructProcessNodeService clientStructProcessNodeService;
	@Autowired
	private ClientEquipWorkService clientEquipWorkService;
	@Autowired
	private ClientEquipFixtureService clientEquipFixtureService;
	@Autowired
	private ClientEquipWorkStackProductService clientEquipWorkStackProductService;

	@Autowired
	private ClientBarcodeMainService clientBarcodeMainService;

	// 根据条码取物品规格的ID
	@ResponseBody
	@RequestMapping("/getMaterialId")
	public ResultMessage getMaterialId(HttpServletRequest request, Long factoryId, String barcodeCode) {
		ResultMessage resultMessage = new ResultMessage();

		if (factoryId == null) {
			resultMessage.setIsSuccess(false);
			resultMessage.addErr("工厂ID不能为空");
		}

		if (StringUtils.isBlank(barcodeCode)) {
			resultMessage.setIsSuccess(false);
			resultMessage.addErr("条码不能为空");
		}
		try {
			BarcodeMain barcodeMain = clientBarcodeMainService.getVoByCode(barcodeCode, getCommonParam(request));
			if (barcodeMain == null) {
				resultMessage.setIsSuccess(false);
				resultMessage.addErr("无信息");
			} else {
				resultMessage.setId(barcodeMain.getMaterialId());
				resultMessage.setIsSuccess(true);
			}
		} catch (BusinessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return resultMessage;
	}

	// 根据工位编码查询当前的作业信息
	@ResponseBody
	@RequestMapping("/getWorkTask")
	public ResultMessage getWorkTask(HttpServletRequest request, Long factoryId, String workstationCode) {
		ResultMessage resultMessage = new ResultMessage();

		if (factoryId == null) {
			resultMessage.setIsSuccess(false);
			resultMessage.addErr("工厂ID不能为空");
		}

		if (StringUtils.isBlank(workstationCode)) {
			resultMessage.setIsSuccess(false);
			resultMessage.addErr("工位编码不能为空");
		}
		try {
			resultMessage = clientWorkTaskProcedureService.getVoByWorkstation(getCommonParam(request), null, null, null,
					workstationCode);

		} catch (BusinessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return resultMessage;
	}

	// 根据设备编码查询要上物料的列表
	@ResponseBody
	@RequestMapping("/listRawMaterial")
	public ResultMessage listRawMaterial(HttpServletRequest request, Long factoryId, String equipCode) {
		ResultMessage resultMessage = new ResultMessage();

		if (factoryId == null) {
			resultMessage.setIsSuccess(false);
			resultMessage.addErr("工厂ID不能为空");
		}

		if (StringUtils.isBlank(equipCode)) {
			resultMessage.setIsSuccess(false);
			resultMessage.addErr("设备编码不能为空");
		}

		List<EquipWorkStackProductVo> list = clientEquipWorkStackProductService.listRawMaterial(getCommonParam(request),
				factoryId, equipCode);
		if ((list == null) || (list.isEmpty())) {
			resultMessage.setIsSuccess(false);
			resultMessage.addErr("无信息");
		} else {
			resultMessage.setIsSuccess(true);
			resultMessage.put(list);
		}

		return resultMessage;
	}

	// 扫描过栈
	@ResponseBody
	@RequestMapping("/passByScanner")
	public ResultMessage passByScanner(HttpServletRequest request, Long factoryId, String macaddress, String code) {

		return clientWorkTaskProcedureService.passByScanner(getCommonParam(request), factoryId, macaddress, code);
	}

	// 解绑载料器过栈
	@ResponseBody
	@RequestMapping("/passByUnbindFixture")
	public ResultMessage passByUnbindFixture(HttpServletRequest request, Long factoryId, String equipCode,
			String equipFixtureCode, String barcode) {

		return clientWorkTaskProcedureService.passByUnbindFixture(getCommonParam(request), factoryId, equipCode,
				equipFixtureCode);
	}

	// 通过载料器上料
	@ResponseBody
	@RequestMapping("/feedByFixture")
	public ResultMessage feedByFixture(HttpServletRequest request, Long factoryId, String equipCode, String fixtureCode,
			String barcode) {

		return clientWorkTaskProcedureService.feedByFixture(getCommonParam(request), factoryId, equipCode, fixtureCode,
				barcode);
	}

	// 通过栈位上料
	@ResponseBody
	@RequestMapping("/feedByStack")
	public ResultMessage feedByStack(HttpServletRequest request, Long factoryId, String equipStackCode,
			String fixtureStackCode, String barcode) {

		return clientWorkTaskProcedureService.feedByStack(getCommonParam(request), factoryId, equipStackCode,
				fixtureStackCode, barcode);
	}

	// 通过接料上料
	@ResponseBody
	@RequestMapping("/feedByConnectRaw")
	public ResultMessage feedByConnectRaw(HttpServletRequest request, Long factoryId, String barcodeOld,
			String barcodeNew) {

		return clientWorkTaskProcedureService.feedByConnectRaw(getCommonParam(request), factoryId, barcodeOld,
				barcodeNew);
	}

	// 通过自动扫描仪上料(组装)
	@ResponseBody
	@RequestMapping("/feedByScanner")
	public ResultMessage feedByScanner(HttpServletRequest request, Long factoryId, String macaddress,
			String barcodeList) {

		return clientWorkTaskProcedureService.feedByScanner(getCommonParam(request), factoryId, macaddress,
				barcodeList);
	}

	// 贴标
	@ResponseBody
	@RequestMapping("/labeling")
	public ResultMessage labeling(HttpServletRequest request, Long factoryId, String workstationCode, String equipCode, String barcodeRaw,
			String barcodeNewList) {

		return clientWorkTaskProcedureService.labeling(getCommonParam(request), factoryId, workstationCode, equipCode, barcodeRaw,
				barcodeNewList);
	}

	// 解绑设备栈位
	@ResponseBody
	@RequestMapping("/unbindEquipStack")
	public ResultMessage unbindEquipStack(HttpServletRequest request, Long factoryId, String equipStackCode) {

		return clientWorkTaskProcedureService.unbindEquipStack(getCommonParam(request), factoryId, equipStackCode);
	}

}
