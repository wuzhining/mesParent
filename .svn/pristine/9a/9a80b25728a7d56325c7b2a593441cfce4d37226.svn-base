package com.techsoft.dao.work;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Repository;

import com.techsoft.common.BaseDaoImpl;
import com.techsoft.common.BaseMapper;
import com.techsoft.common.BusinessException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.SQLException;
import com.techsoft.mapper.sys.MycatSequenceMapper;
import com.techsoft.entity.common.BillWarehouseItem;
import com.techsoft.entity.common.WorkPlanMaterial;
import com.techsoft.mapper.work.WorkPlanMaterialMapper;
import com.techsoft.utils.zklock.DistributedLock;
import com.techsoft.utils.zklock.LockManager;

@Repository
public class WorkPlanMaterialDaoImpl extends BaseDaoImpl<WorkPlanMaterial> implements WorkPlanMaterialDao {
	@Resource
	protected WorkPlanMaterialMapper workPlanMaterialMapper;
	@Resource
	protected MycatSequenceMapper mycatSequenceMapper;	
	
	@Override
	public Class<WorkPlanMaterial> getEntityClass() {
		return WorkPlanMaterial.class;
	}	
	
	@Override
	public BaseMapper<WorkPlanMaterial> getBaseMapper() {
		return this.workPlanMaterialMapper;
	}
	
	@Override
	@SuppressWarnings({ "rawtypes" })
	public BaseMapper getSeqMapper() {
		return mycatSequenceMapper;
	}
	
	@Override
	public String getTableName() {
		return "WORK_PLAN_MATERIAL";
	}
	
	@Override
	public void insertSaveCheck(WorkPlanMaterial value) throws BusinessException, SQLException {
		if (value.getId() == null || value.getId().equals(0L)) {
			throw new BusinessException("ID不能为空");
		}
	}
	
	@Override
	public void updateSaveCheck(WorkPlanMaterial value) throws BusinessException, SQLException {
	
	}
	
	@Override
	public void deleteSaveCheck(WorkPlanMaterial value) throws BusinessException, SQLException {
	
	}

	@Override
	public void updateBatch(List<WorkPlanMaterial> list,CommonParam commonParam) throws BusinessException, SQLException {
		List<Long> ids = new ArrayList<Long>();
		for (WorkPlanMaterial workPlanMaterial : list) {
			workPlanMaterial.setModifyUserId(Long.parseLong(commonParam.getUserId()));
			ids.add(workPlanMaterial.getId());
		}
		List<DistributedLock> listlock = LockManager.getLongZKDistributedLock(WorkPlanMaterial.class.getName(), ids);
		LockManager.lockList(listlock);
		try {
			this.workPlanMaterialMapper.updateBacth(list);
		} finally {
			LockManager.unLockList(listlock);
		}
	}
			
}
