package com.techsoft.client.service.history;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageInfo;
import com.techsoft.common.BaseClientServiceImpl;
import com.techsoft.common.BaseService;
import com.techsoft.common.BusinessException;
import com.techsoft.common.SQLException;
import com.techsoft.common.CommonParam;
import com.techsoft.common.persistence.ResultMessage;
import com.techsoft.common.utils.BeanUtil;

import com.techsoft.entity.common.HistoryInventoryLocation;
import com.techsoft.entity.history.HistoryInventoryLocationVo;
import com.techsoft.entity.history.HistoryInventoryLocationParamVo;
import com.techsoft.service.history.HistoryInventoryLocationService;

@org.springframework.stereotype.Service
public class ClientHistoryInventoryLocationServiceImpl extends BaseClientServiceImpl<HistoryInventoryLocation> implements ClientHistoryInventoryLocationService {
	@com.alibaba.dubbo.config.annotation.Reference
	private HistoryInventoryLocationService historyInventoryLocationService;
    
	@Override
	public BaseService<HistoryInventoryLocation> getBaseService() {
		return historyInventoryLocationService;
	}	    	
    
	private HistoryInventoryLocationVo getVo(HistoryInventoryLocation historyInventoryLocation, CommonParam commonParam) throws BusinessException, SQLException {
		HistoryInventoryLocationVo vo = new HistoryInventoryLocationVo(historyInventoryLocation);
		// TODO 此处填充其它关联字段的处理代码
		return vo;
	} 
	
	private HistoryInventoryLocationVo getExtendVo(HistoryInventoryLocation historyInventoryLocation, CommonParam commonParam) throws BusinessException, SQLException {
		HistoryInventoryLocationVo vo = this.getVo(historyInventoryLocation, commonParam);
		// TODO 此处填充其它关联字段的处理代码
		return vo;
	} 
		
	private List<HistoryInventoryLocationVo> getVoList(List<HistoryInventoryLocation> list, CommonParam commonParam) throws BusinessException, SQLException {
		List<HistoryInventoryLocationVo> voList = new ArrayList<HistoryInventoryLocationVo>();
		for (HistoryInventoryLocation entity : list) {
			voList.add(this.getVo(entity, commonParam));
		}
		
		return voList;
	}	
	
	private List<HistoryInventoryLocationVo> getExtendVoList(List<HistoryInventoryLocation> list, CommonParam commonParam) throws BusinessException, SQLException {
		List<HistoryInventoryLocationVo> voList = new ArrayList<HistoryInventoryLocationVo>();
		for (HistoryInventoryLocation entity : list) {
			voList.add(this.getExtendVo(entity, commonParam));
		}
		
		return voList;
	}	
	
	public HistoryInventoryLocationVo getVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		HistoryInventoryLocation entity = this.getBaseService().selectById(id, commonParam);
		
		return this.getVo(entity, commonParam);
	}
	
	public List<HistoryInventoryLocationVo>  selectListVoByParamVo(HistoryInventoryLocationParamVo historyInventoryLocation, CommonParam commonParam) throws BusinessException, SQLException {
		if(historyInventoryLocation==null){
			historyInventoryLocation = new HistoryInventoryLocationParamVo();
		}
		historyInventoryLocation.setTenantId(commonParam.getTenantId());	
	
		List<HistoryInventoryLocation> list = (List<HistoryInventoryLocation>) this.getBaseService().selectListByParamVo(historyInventoryLocation, commonParam);
		
		return getVoList(list, commonParam);
	}
	
	@SuppressWarnings({"unchecked", "rawtypes" })
	public PageInfo<HistoryInventoryLocationVo> selectPageVoByParamVo(HistoryInventoryLocationParamVo historyInventoryLocation, CommonParam commonParam, int pageNo, int pageSize) 
			throws BusinessException, SQLException {
		if(historyInventoryLocation==null){
			historyInventoryLocation = new HistoryInventoryLocationParamVo();
		}
		historyInventoryLocation.setTenantId(commonParam.getTenantId());	
					
		PageInfo<HistoryInventoryLocation> list  = (PageInfo<HistoryInventoryLocation>) this.getBaseService().selectPageByParamVo(historyInventoryLocation, commonParam, pageNo, pageSize);
		List<HistoryInventoryLocationVo> volist = new ArrayList<HistoryInventoryLocationVo>();
		
		Iterator<HistoryInventoryLocation> iter = list.getList().iterator();
		HistoryInventoryLocationVo vo = null;
		while (iter.hasNext()) {
			vo = this.getVo(iter.next(), commonParam);
			volist.add(vo);
		}
		
		Page<HistoryInventoryLocationVo> vpage = new Page<HistoryInventoryLocationVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());
		
		return new PageInfo(vpage);
	}	
	
	public HistoryInventoryLocationVo getExtendVoByID(Long id, CommonParam commonParam) throws BusinessException, SQLException {
		HistoryInventoryLocation entity = this.getBaseService().selectById(id, commonParam);
		
		return this.getExtendVo(entity, commonParam);
	}
	
	public List<HistoryInventoryLocationVo>  selectListExtendVoByParamVo(HistoryInventoryLocationParamVo historyInventoryLocation, CommonParam commonParam) 
			throws BusinessException, SQLException {
		if(historyInventoryLocation==null){
			historyInventoryLocation = new HistoryInventoryLocationParamVo();
		}
		historyInventoryLocation.setTenantId(commonParam.getTenantId());	
					
		List<HistoryInventoryLocation> list = (List<HistoryInventoryLocation>) this.getBaseService().selectListByParamVo(historyInventoryLocation, commonParam);
		
		return this.getExtendVoList(list, commonParam);
	}
	
	@SuppressWarnings({"unchecked", "rawtypes" })
	public PageInfo<HistoryInventoryLocationVo> selectPageExtendVoByParamVo(HistoryInventoryLocationParamVo historyInventoryLocation, CommonParam commonParam, int pageNo, int pageSize) 
			throws BusinessException, SQLException {
		if(historyInventoryLocation==null){
			historyInventoryLocation = new HistoryInventoryLocationParamVo();
		}
		historyInventoryLocation.setTenantId(commonParam.getTenantId());	
					
		PageInfo<HistoryInventoryLocation> list  = (PageInfo<HistoryInventoryLocation>) this.getBaseService().selectPageByParamVo(historyInventoryLocation, commonParam, pageNo, pageSize);
		List<HistoryInventoryLocationVo> volist = new ArrayList<HistoryInventoryLocationVo>();
		
		Iterator<HistoryInventoryLocation> iter = list.getList().iterator();
		HistoryInventoryLocationVo vo = null;
		while (iter.hasNext()) {
			vo = this.getExtendVo(iter.next(), commonParam);
			volist.add(vo);
		}
		
		Page<HistoryInventoryLocationVo> vpage = new Page<HistoryInventoryLocationVo>();
		vpage.addAll(volist);
		vpage.setPageNum(list.getPageNum());
		vpage.setPageSize(list.getPageSize());
		vpage.setTotal(list.getTotal());
		
		return new PageInfo(vpage);
	}	
	
	public ResultMessage saveOrUpdate(HistoryInventoryLocationParamVo historyInventoryLocationParamVo, CommonParam commonParam) { 
		ResultMessage resultMessage = new ResultMessage(); 
		HistoryInventoryLocation historyInventoryLocation = null;
		try {
			if (historyInventoryLocationParamVo.getId() == null) {//新增
			 
				historyInventoryLocationParamVo.setTenantId(commonParam.getTenantId());
				historyInventoryLocation = historyInventoryLocationService.saveOrUpdate(historyInventoryLocationParamVo,
						commonParam);
				resultMessage.setIsSuccess(true);
			} else {  //修改
				HistoryInventoryLocation historyInventoryLocationVoTemp = this.selectById(historyInventoryLocationParamVo
						.getId(), commonParam);

				BeanUtil.copyNotNullProperties(historyInventoryLocationVoTemp,
						historyInventoryLocationParamVo);
  
				historyInventoryLocation = historyInventoryLocationService.saveOrUpdate(
						historyInventoryLocationVoTemp, commonParam); 
  
				resultMessage.setIsSuccess(true);
			}
			
			resultMessage.setBaseEntity(historyInventoryLocation);
		} catch (BusinessException e) {
			resultMessage.addErr(e.getMessage());
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return resultMessage;
	}	
}
